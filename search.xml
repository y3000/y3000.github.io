<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React 要点</title>
      <link href="/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/React%E8%A6%81%E7%82%B9/"/>
      <url>/2022/11/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/React%E8%A6%81%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="React-概述"><a href="#React-概述" class="headerlink" title="React 概述"></a>React 概述</h2><p>React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。</p><p><strong>特点：</strong></p><ul><li>MVC</li><li>虚拟DOM</li></ul><h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><p><code>npm i react react-dom</code></p><p>1、引入</p><p>2、创建react元素<code>react.createElement()</code> （不常用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">react.createElement()</span><br><span class="line">参数：</span><br><span class="line">- 参数一：元素名称</span><br><span class="line">- 参数二：元素属性</span><br><span class="line">- 参数三及以后参数：元素的子节点。</span><br><span class="line">const el = React.createElement(&#x27;h1&#x27;, &#123;title: &#x27;标题&#x27;&#125;, &#x27;Hello React&#x27;)</span><br></pre></td></tr></table></figure><p>3、渲染react元素到页面中<code>ReactDOM.render()</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render()</span><br><span class="line">参数：</span><br><span class="line">- 要渲染的react元素</span><br><span class="line">- DOM对象，用于指定渲染到页面中的位置</span><br><span class="line">ReactDOM.render(el, document.getElementById(&#x27;root&#x27;))</span><br></pre></td></tr></table></figure><blockquote><p>ReactDOM  ——做web应用</p><p>ReactNative ——做移动安卓应用</p></blockquote><h3 id="脚手架使用"><a href="#脚手架使用" class="headerlink" title="脚手架使用"></a>脚手架使用</h3><p>初始化项目：</p><p><code>npx create-react-app myFirstReact</code></p><blockquote><p>npx 是npm的命令，无需安装脚手架，就可以直接使用创建</p></blockquote><p>启动：<br><code>npm start</code></p><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><blockquote><p>JSX是声明式语法，与HTML结构相同</p><p>react 内置的bable 使得可以用JSX语法</p></blockquote><h3 id="JSX-基本使用"><a href="#JSX-基本使用" class="headerlink" title="JSX 基本使用"></a>JSX 基本使用</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSX 语法</span></span><br><span class="line"><span class="keyword">const</span> title  = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello JSX<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">ReactDOM.render(title,<span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure><p><strong>语法注意点：</strong></p><ul><li><p>React属性名 使用驼峰命名法</p></li><li><p>特殊的属性名：class -&gt; className  、for  -&gt; htmlFor、 tabindex -&gt; tabIndex</p></li><li><p>没有子节点 可以直接用<sapn>  结束</sapn></p></li><li><p>最好使用()包裹JSX</p><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120849.png" alt="image-20221105083355425"></p></li></ul><h3 id="JSX中使用JavaScript表达式"><a href="#JSX中使用JavaScript表达式" class="headerlink" title="JSX中使用JavaScript表达式"></a>JSX中使用JavaScript表达式</h3><p>注意点：</p><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120853.png" alt="image-20221105083841384"></p><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a><strong>条件渲染</strong></h4><ul><li>if..else  </li><li>三元运算符 </li><li>逻辑与运算符</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件渲染</span></span><br><span class="line"><span class="keyword">const</span> isLoading = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> loadData = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(isLoading)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>加载中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>加载完毕<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = (<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;loadData()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</span><br><span class="line">ReactDOM.render(title,<span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a><strong>列表渲染</strong></h4><ul><li>使用map() 遍历</li><li>要添加key 属性，保证唯一值，避免index作为key</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 列表渲染 map</span></span><br><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;aaa&quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;bbb&quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;ccc&quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;ddd&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> list = (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;data.map(item =&gt; <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">ReactDOM.render(list, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="JSX-样式处理"><a href="#JSX-样式处理" class="headerlink" title="JSX 样式处理"></a>JSX 样式处理</h3><ul><li><p>行内样式——style={}</p><p>驼峰写法属性</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">backgraoundColor</span>: <span class="string">&#x27;red&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div style= &#123;obj&#125;&gt;</span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sytle</span>= <span class="string">&#123;&#123;</span>  <span class="attr">backgraoundColor:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>引入CSS文件</p><ul><li><p>创建css文件，在js文件中import引入</p></li><li><p>直接在标签中使用类名 、id </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">&#x27;name&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>==注意：==</p><ul><li><p>类名class =&gt; className</p></li><li><p>label 标签的的for 属性 =&gt;  htmlFor</p></li><li><p>tabindex =&gt; tabIndex</p></li></ul></li></ul></li></ul><h5 id="富文本展示"><a href="#富文本展示" class="headerlink" title="富文本展示"></a>富文本展示</h5><p><img src="/.com//image-20221118132859784.png" alt="image-20221118132859784"></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>JSX 仅仅是<code>React.createElement()</code>方法的语法糖(简化语法)</li><li>JSX 语法被<code>@babel/preset-react</code>插件编译为<code>createElement()</code>方法</li></ul><h2 id="react-组件"><a href="#react-组件" class="headerlink" title="react 组件"></a>react 组件</h2><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><ul><li>大写字母作为组件名称</li><li>必须return，表示渲染的内容，返回null表示不渲染任何内容</li><li>函数名作为组件的标签名</li></ul><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120854.png" alt="image-20221105091041421"></p><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><ul><li>必须大写字母开头</li><li>继承自React.Component父类，可以使用父类的方法或属性</li><li>类组件必须提供render()方法，必须有返回值，表示该组件的结构</li></ul> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello2</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>类创建组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello2</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;classCom&#x27;</span>))</span><br></pre></td></tr></table></figure><p>抽离独立JS文件（组件化）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloReact</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件化分离展示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HelloReact</span><br></pre></td></tr></table></figure><p><strong>渲染组件：</strong></p><p>React 元素也可以是用户自定义的组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Sara&quot;</span> /&gt;</span></span>;</span><br><span class="line"><span class="comment">//它会将 JSX 所接收的属性（attributes）以及子组件（children）转换为单个对象传递给组件，这个对象被称之为 “props”。</span></span><br></pre></td></tr></table></figure><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>React 事件的命名采用小驼峰式（camelCase），而不是纯小写。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;activateLasers&#125;&gt;  Activate Lasers</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>不能通过返回 <code>false</code> 的方式阻止默认行为。你必须显式的使用 <code>preventDefault</code> 。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统的：</span></span><br><span class="line">&lt;a href=<span class="string">&quot;#&quot;</span> onclick=<span class="string">&quot;console.log(&#x27;The link was clicked.&#x27;); return false&quot;</span>&gt;</span><br><span class="line">  Click me</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"><span class="comment">//react</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ActionLink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">e</span>) </span>&#123;    e.preventDefault();    <span class="built_in">console</span>.log(<span class="string">&#x27;The link was clicked.&#x27;</span>);  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>      Click me</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120855.png" alt="image-20221105141747874"></p><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120856.png" alt="image-20221105142106182"></p><h4 id="事件绑定的this指向"><a href="#事件绑定的this指向" class="headerlink" title="事件绑定的this指向"></a><strong>事件绑定的this指向</strong></h4><blockquote><p><strong>问题： 类组件中的方法不能通过this拿到state中的数据</strong></p></blockquote><p>解决办法:</p><ol><li><p>将方法该写成箭头函数调用 (推荐，但是调用的时候==没法传参==)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">addCount = <span class="function">()=&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123; <span class="built_in">this</span>.handleClick&#125;&gt;</span><br></pre></td></tr></table></figure></li><li><p>用bind()方法改变this指向（不推荐）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123; <span class="built_in">this</span>.handleClick.bind(<span class="built_in">this</span>)&#125;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120857.png" alt="image-20221105144754461"></p></li><li><p>在回调中使用箭头函数(推荐)，==可以传参==</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 此语法确保 `handleClick` 内的 `this` 已被绑定。    </span></span><br><span class="line">    <span class="keyword">return</span> (      <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.handleClick()&#125;&gt;        Click me</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>react 事件绑定，没有绑定到具体的元素上，是采用代理，绑定的事件的是根节点 ，用事件冒泡机制</p><p>好处： 占用内存小</p></blockquote><p><strong>有状态组件和无状态组件</strong></p><ul><li>函数组件又 叫做无状态组件,类组件又叫做有状态组件</li><li>状态( state )即数据</li><li> 函数组件没有自 己的状态,==负责数据展示(静)==</li><li> 类组件有自己的状态 ,==负责更新UI==,让页面“动”起来</li></ul><h3 id="state和setState"><a href="#state和setState" class="headerlink" title="state和setState"></a><strong>state和setState</strong></h3><p>改变状态：this.setState({ 要修改的值 })</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>: <span class="built_in">this</span>.state.count + <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>setState () 是==异步==更新数据的,多次调用setState==只会触发一次重新渲染==</p></li><li><p><strong>如果是同步更新，每一个setState对调用一个render，并且如果多次调用setState会以最后调用的为准，前面的将会作废；</strong></p><p><strong>如果是异步更新，多个setSate会统一调用一次render</strong></p></li><li><p>异步更新解决方案：</p><ul><li><p>推荐语法：传一个回调函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(<span class="function">(<span class="params">state, props</span>) =&gt;</span> &#123; <span class="comment">//传一个回调函数，</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="comment">//返回一个对象</span></span><br><span class="line">        <span class="attr">count</span>: sate.count+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//这样可以保证拿到最新的state和props 做操作。适用于多次调用</span></span><br></pre></td></tr></table></figure><p>第二个参数  回调函数 ，可以在状态更新后做操作，可以操作DOM</p><p><img src="/.com//image-20221117093545981.png" alt="image-20221117093545981"></p></li></ul></li></ul><h3 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h3><h4 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a><strong>受控组件</strong></h4><ol><li>==将状态state的值 作为文本框的value值 （v-bind）==</li><li>给表单元素==绑定change事件==，将表单元素的value值设置为state值，控制表单元素变化 (v-on)</li></ol><blockquote><p>注意：</p><p>1.文本框、富文本框、下拉框操作<code>value</code>属性</p><p>2.复选框操作<code>checked</code>属性</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">inputval</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">inputArea</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">checked</span>: <span class="literal">false</span></span><br><span class="line">&#125; </span><br><span class="line">handleChange = <span class="function"><span class="params">e</span> =&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">         <span class="attr">inputval</span>: e.target.value</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"> handleCheckBox = <span class="function"><span class="params">e</span> =&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">         <span class="attr">checked</span>: e.target.checked</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> (</span><br><span class="line">         <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">h2</span>&gt;</span>表单 双向绑定<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.inputval&#125;</span>  <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">checked</span>=<span class="string">&#123;this.state.checked&#125;</span>  <span class="attr">onChange</span>=<span class="string">&#123;this.handleCheckBox&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">     )</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>缺点：</p><blockquote><p>每一个表单元素都绑定一个事件，有点繁琐</p></blockquote><p><strong>优化：</strong></p><ol><li><p>添加name属性 名称与state相同</p></li><li><p>根据表单元素获取对应的值</p></li><li><p>在change事件中处理 用 [name] 来修改对应的值</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整合</span></span><br><span class="line">handleChange = <span class="function"><span class="params">e</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> target = e.target;</span><br><span class="line">    <span class="keyword">const</span> value = target.type === <span class="string">&#x27;checkbox&#x27;</span> ? target.checked : target.value</span><br><span class="line">    <span class="keyword">const</span> name = target.name</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        [name]: value</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>计数器： &#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addCount&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>表单 双向绑定<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;inputval&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.inputval&#125;</span>  <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;inputArea&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.inputArea&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.checked&#125;</span>  <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a><strong>非受控组件</strong></h4><p>表单</p><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120858.png" alt="image-20221105153051049"></p><h3 id="案例—评论列表"><a href="#案例—评论列表" class="headerlink" title="案例—评论列表"></a>案例—评论列表</h3><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120859.png" alt="image-20221105164238205"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">import &#x27;./css/comment.css&#x27;</span><br><span class="line"></span><br><span class="line">class Comment extends React.Component&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        userName: &#x27;&#x27;,</span><br><span class="line">        content: &#x27;&#x27;,</span><br><span class="line">        comments:[</span><br><span class="line">            &#123;id: 1, name: &#x27;jack&#x27;, content: &#x27;沙发&#x27;&#125;,</span><br><span class="line">            &#123;id: 2, name: &#x27;jack&#x27;, content: &#x27;沙发1&#x27;&#125;,</span><br><span class="line">            &#123;id: 3, name: &#x27;Tom&#x27;, content: &#x27;沙发222&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 渲染评论</span><br><span class="line">    renderList()&#123;</span><br><span class="line">        return this.state.comments.length !== 0 ? </span><br><span class="line">        (</span><br><span class="line">            &lt;div className=&quot;show&quot;&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123;this.state.comments.map(item =&gt; (</span><br><span class="line">                        &lt;li key=&#123;item.id&#125;&gt;</span><br><span class="line">                            &lt;p&gt;评论人评论内容： &#123;item.content&#125;&lt;/p&gt; </span><br><span class="line">                        &lt;/li&gt;</span><br><span class="line">                    ))&#125;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        ) : (&lt;div className=&quot;no-comment&quot;&gt;暂无评论&lt;/div&gt;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 提交表单</span><br><span class="line">    handleForm = (e)=&gt;&#123;</span><br><span class="line">        const &#123;name,value&#125; = e.target;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            [name] : value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    handleComment = ()=&gt;&#123;</span><br><span class="line">        const &#123;comments,userName, content&#125; = this.state</span><br><span class="line">        if(userName === &#x27;&#x27; || content === &#x27;&#x27;)&#123;</span><br><span class="line">            alert(&#x27;评论信息不能为空&#x27;)</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            userName: &#x27;&#x27;,</span><br><span class="line">            content: &#x27;&#x27;,</span><br><span class="line">        &#125;)</span><br><span class="line">        const newComments = [&#123;</span><br><span class="line">            id: Math.random(),</span><br><span class="line">            name: userName,</span><br><span class="line">            content: content</span><br><span class="line">        &#125; ,...comments]</span><br><span class="line">        console.log(newComments);</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            comments: newComments</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div className=&#x27;comment&#x27;&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; name=&quot;userName&quot; value=&#123;this.state.userName&#125; placeholder=&quot;请输入评论人&quot; onChange=&#123;this.handleForm&#125;/&gt;</span><br><span class="line">                &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">                &lt;textarea rows=&quot;3&quot; cols=&quot;20&quot; name=&quot;content&quot; value=&#123;this.state.content&#125; placeholder=&quot;请输入评论&quot; onChange=&#123;this.handleForm&#125;/&gt;</span><br><span class="line">                &lt;br /&gt;</span><br><span class="line">                &lt;button onClick=&#123;this.handleComment&#125;&gt;评论&lt;/button&gt;</span><br><span class="line">                &#123;this.renderList()&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Comment</span><br></pre></td></tr></table></figure><h2 id="组件进阶"><a href="#组件进阶" class="headerlink" title="组件进阶"></a>组件进阶</h2><h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120860.png" alt="image-20221107144441068"></p><p><strong>接收数据：</strong>函数组件通过==参数props== ，类组件通过==this.props== </p><p>==如果传递非字符串 用 <code>&#123;&#125;</code>==</p><p><strong>props的特点：</strong></p><p>1、可以给组件传递任意类型的数据</p><ul><li>字符串、数字、对象、函数</li><li>JSX对象</li></ul><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120861.png" alt="image-20221107150046130"></p><p>2、<strong>props是只读对象，不能修改</strong></p><p>3、使用类组件时，如果写了构造函数constructor(),必须将props传递给super，否则无法获取。</p><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120862.png" alt="image-20221107150402608"></p><h5 id="children属性"><a href="#children属性" class="headerlink" title="children属性"></a>children属性</h5><p><strong>props.children  当组件标签有子节点时可以使用该属性</strong></p><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120863.png" alt="image-20221107163127004"></p><h5 id="props-校验"><a href="#props-校验" class="headerlink" title="==props 校验=="></a>==<strong>props 校验</strong>==</h5><p>​    允许在创建组件时，指定props的类型、格式</p><p>​    作用：捕获使用组件时因为props导致的错误</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">App.propTypes = &#123;</span><br><span class="line">    <span class="attr">colors</span>: PropTypes.array</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221116145010653.png" alt="image-20221116145010653"></p><p><strong>常见的约束规则</strong></p><p>PropTypes.func / PropsType.string  /element…</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//对标签属性进行类型、必要性的限制</span></span><br><span class="line">Person.propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>:PropTypes.string.isRequired, <span class="comment">//限制name必传，且为字符串</span></span><br><span class="line">    <span class="attr">sex</span>:PropTypes.string,<span class="comment">//限制sex为字符串</span></span><br><span class="line">    <span class="attr">age</span>:PropTypes.number,<span class="comment">//限制age为数值</span></span><br><span class="line">    <span class="attr">speak</span>:PropTypes.func,<span class="comment">//限制speak为函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定默认标签属性值</span></span><br><span class="line">Person.defaultProps = &#123;</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,<span class="comment">//sex默认值为男</span></span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span> <span class="comment">//age默认值为18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120866.png" alt="image-20221107164357446"></p><h5 id="props-默认值"><a href="#props-默认值" class="headerlink" title="props 默认值"></a><strong>props 默认值</strong></h5><p>场景：分页组件 </p><p>在未传入props值时生效</p><p><code>static defaultProps = &#123;&#125;</code></p><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120867.png" alt="image-20221107164805337"></p><h4 id="属性-props-和-状态-state-对比"><a href="#属性-props-和-状态-state-对比" class="headerlink" title="属性 props 和 状态 state 对比"></a>属性 props 和 状态 state 对比</h4><p>属性vs状态<br>**相似点： **都是纯js对象，都会触发render更新，都具有确定性（状态/属性相同，结果相同)</p><p><strong>不同点:</strong></p><ol><li>属性能从父组件获取，状态不能</li><li>属性可以由父组件修改，状态不能</li><li>属性能在内部设置默认值，状态也可以，设置方式不一样</li><li>属性不在组件内部修改，状态要在组件内部修改</li><li>属性能设置子组件初始值，状态不可以</li><li>属性可以修改子组件的值，状态不可以工</li></ol><blockquote><p><code>state</code> 的主要作用是用于组件保存、控制、修改自己的可变状态。state 在组件内部初始化，可以被组件自身修改，而外部不能访问也不能修改。你可以认为state是一个局部的、只能被组件自身控制的数据源。</p><p>state中状态可以通过this.setstate方法进行更新，setstate会导致组件的重新渲染。</p><p><code>props</code>的主要作用是让使用该组件的父组件可以传入参数来配置该组件。它是外部传进来的配置参数，组件内部无法控制也无法修改。除非外部组件主动传入新的 props，否则组件的 props永远保持不变。</p><p>没有state的组件叫<strong>无状态组件</strong>（stateless component)，设置了state的叫做<strong>有状态组件</strong>(stateful component)。</p><p>因为状态会带来管理的复杂性，我们尽量多地写无状态组件，尽量少地写有状态的组件。这样会降低代码维护的难度，也会在一定程度上增强组件的可复用性。 </p></blockquote><h4 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h4><p>Refs 提供了一种方式，允许我们访问 DOM 节点或在 <code>render</code> 方法中创建的 React 元素。</p><blockquote><p>想要获取到一个DOM节点，可以直接在这个节点上==添加ref属性==。利用该属性进行获取该节点的值。</p></blockquote><p><strong>使用 refs 的情况：</strong></p><ul><li>管理焦点，文本选择或媒体播放。</li><li>触发强制动画。</li><li>集成第三方 DOM 库。</li></ul><p><strong>有三种操作<code>refs</code>的方法，分别为：</strong></p><ul><li><p>字符串形式(不建议使用它)</p><p>给需要的节点添加ref属性,此时该实例对象的refs就会有这个值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input ref=<span class="string">&quot;dian&quot;</span> type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;点击弹出&quot;</span> /&gt;</span><br><span class="line">inputBlur = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.refs.shiqu.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>回调形式</p></li><li><p><code>createRef</code>形式(推荐)</p><p><code>React.createRef()</code> </p><p>可以通过ref 拿到DOM节点</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">myref = React.createRef()</span><br><span class="line"></span><br><span class="line">&lt;input ref=&#123;<span class="built_in">this</span>.myref&#125;/&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        ()=&gt;</span>&#123;</span></span><br><span class="line"><span class="xml">            console.log(&quot;click&quot;, this.myref.current.value)</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;&gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="组件通讯的三种方式"><a href="#组件通讯的三种方式" class="headerlink" title="组件通讯的三种方式"></a>组件通讯的三种方式</h3><h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h4><p>通过props 属性接收，</p><ul><li>通过 … 可以把所有属性传过去</li><li></li></ul><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120868.png" alt="image-20221107150644135"></p><h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h4><ol><li>父组件提供一个==回调函数==，用于接收数据</li><li>将该函数作为属性的值，传递给子组件</li><li>子组件通过props调用回调函数</li><li>将子组件数据作为参数传递给回调函数</li></ol><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120869.png" alt="image-20221107150959209"></p><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120870.png" alt="image-20221107155508550"></p><h4 id="兄弟组件"><a href="#兄弟组件" class="headerlink" title="兄弟组件"></a>兄弟组件</h4><p>子传父 ，再父传子</p><p>提升到公共父组件中，再共享</p><ol><li><p>将<strong>状态提升到父组件</strong>中，并且<strong>提供修改状态的方法</strong></p></li><li><p>分别将状态和事件通过props 传递给接收的子组件</p><p><img src="/.com//image-20221116143809641.png" alt="image-20221116143809641"></p><p><img src="/.com//image-20221116143928672.png" alt="image-20221116143928672"></p></li></ol><p><strong>发布订阅模式通信 （redux）</strong></p><h4 id="跨级传递-context"><a href="#跨级传递-context" class="headerlink" title="跨级传递 context"></a>跨级传递 context</h4><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120871.png" alt="image-20221107162449046"></p><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120872.png" alt="image-20221107162623643"></p><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p><strong>props.children  当组件标签有子节点时可以使用该属性</strong></p><p>反之，创建组件时为组件留一个插槽，<code>&#123;this.props.children&#125; </code></p><p>就可以在使用组件中插入额外节点，同时这个节点可以访问父组件的状态，并且在子组件中显示</p><p><img src="/.com//image-20221120172519545.png" alt="image-20221120172519545"></p><p><img src="/.com//image-20221120171814100.png" alt="image-20221120171814100"></p><blockquote><p>插槽可以提高组件的可复用性 </p></blockquote><h3 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h3><blockquote><p>类的组件才有生命周期</p></blockquote><h4 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h4><blockquote><p>执行顺序 <code>constructor</code> -&gt; <code>getDerivedStateFromProps</code> 或者 <code>componentWillMount</code> -&gt; <code>render</code> -&gt; <code>componentDidMount</code></p></blockquote><ul><li><code>construcor()</code> 创建组件时最先运行，初始化State  为事件处理程序绑定this</li><li><code>render()</code>  不能调用setSate() 函数，会陷入死循环， 每次渲染都会触发</li><li><code>componentDidMount()</code> 组件挂载完（完成DOM渲染），可以操作DOM和发送请求</li></ul><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120873.png" alt="image-20221107165343275"></p><h4 id="组件更新阶段"><a href="#组件更新阶段" class="headerlink" title="组件更新阶段"></a>组件更新阶段</h4><p><strong>触发时机：</strong></p><ol><li>每次setSate()</li><li>forceUpdate（）</li><li>组件接收到新的props</li></ol><p><strong>钩子函数：</strong></p><ul><li><p><strong>shouldComponentUpdate（nextProps,nextState）</strong></p><p>可以阻止更新</p></li><li><p>render()</p></li><li><p><strong>componentDidUpdate()</strong> </p><p>可以操作DOM</p><p>setState() 操作不能直接使用 ，要放在if条件中</p><p>this.props !== preprops时  比较更新前后的props值·</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps,prevState,snapshotValue) &#123;</span><br><span class="line">  // 典型用法（不要忘记比较 props）：</span><br><span class="line">  if (this.props.userID !== prevProps.userID) &#123;</span><br><span class="line">    this.fetchData(this.props.userID);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221116151430329.png" alt="image-20221116151430329"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120874.png" alt="image-20221107170838519"></p><p>更新setstate 需要放在if 条件中</p><p>或者==阻止更新==：</p><ul><li><p>```jsx<br>shouldComponentUpdate(nextProps, nextState){</p><pre><code>if(this.state.xxx !== nextState.xxx)&#123;    return true;&#125;return false;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  **按照新生命周期执行顺序：**</span><br><span class="line">  </span><br><span class="line">  1. static getDerivedStateFromProps（nextProps, prevState）</span><br><span class="line">  2. shouldComponentUpdate（nextProps,nextState）</span><br><span class="line">  3. render（）</span><br><span class="line">  4. getSnapshotBeforeUpdate（prevProps,prevState）</span><br><span class="line">  5. componentDidUpdate（prevProps,precState,snapshot）</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">#### 卸载阶段</span><br><span class="line"></span><br><span class="line">清理工作：清理定时器</span><br><span class="line"></span><br><span class="line">- **componentWillUnmount()**  </span><br><span class="line"></span><br><span class="line">![image-20221107171837704](https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211131120875.png)</span><br><span class="line"></span><br><span class="line">#### 新的生命周期</span><br><span class="line"></span><br><span class="line">##### getSnapshotBeforeUpdate</span><br><span class="line"></span><br><span class="line">在最近一次的渲染输出之前被提交之前调用，也就是即将挂载时调用，替换componetnWillUpdate。</span><br><span class="line"></span><br><span class="line">可以使组件在==DOM更新之前==捕获一些信息（例如滚动位置），此生命周期钩子函数==返回的参数会作为参数传递==给 `componentDidUpdate()`,不需要传值就返回null</span><br><span class="line"></span><br><span class="line">##### static getDerivedStateFromProps</span><br><span class="line"></span><br><span class="line">1. 首先，该函数会在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用；</span><br><span class="line">2. 该函数必须是静态的；</span><br><span class="line">3. 给组件传递的数据（props）以及组件状态（state），会作为参数到这个函数中；</span><br><span class="line">4. 该函数也必须有返回值，返回一个Null或者state对象。因为初始化和后续更新都会执行这个方法，因此在==这个方法返回state对象==，就相当于==将原来的state进行了覆盖==，所以倒是修改状态不起作用。</span><br><span class="line"></span><br><span class="line">### 组件复用</span><br><span class="line"></span><br><span class="line">#### render-props</span><br><span class="line"></span><br><span class="line">- 组件封装后 传递参数 可以通过render根据需要 重新渲染组件内容</span><br><span class="line"></span><br><span class="line">  ```react</span><br><span class="line">  import React from &#x27;react&#x27;</span><br><span class="line">  </span><br><span class="line">  class Mouse extends React.Component&#123;</span><br><span class="line">      state = &#123;</span><br><span class="line">          x: 0,</span><br><span class="line">          y: 0</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      // 鼠标移动事件处理</span><br><span class="line">      handleMouseMove = e =&gt; &#123;</span><br><span class="line">          this.setState(&#123;</span><br><span class="line">              x: e.clientX,</span><br><span class="line">              y: e.clientY</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      // 监听鼠标移动事件</span><br><span class="line">      componentDidMount() &#123;</span><br><span class="line">          window.addEventListener(&#x27;mousemove&#x27;, this.handleMouseMove)</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      render() &#123;</span><br><span class="line">          return this.props.render(this.state)//使用render</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  export default Mouse</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Mouse render=&#123;mouse =&gt; &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;p&gt;鼠标位置： &#123;mouse.x&#125; &#123;mouse.y&#125;&lt;/p&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;&#125; /&gt;</span><br></pre></td></tr></table></figure><ul><li>给render props 添加props 校验</li><li>应该在组件==卸载时解除mousemove事件绑定==</li></ul></li><li><p>使用children  </p></li></ul><p>​    <img src="/.com//image-20221116162518295.png" alt="image-20221116162518295"></p><p>​    <img src="/.com//image-20221116162547305.png" alt="image-20221116162547305"></p><h4 id="高阶组件（HOC）"><a href="#高阶组件（HOC）" class="headerlink" title="高阶组件（HOC）"></a>高阶组件（HOC）</h4><blockquote><p>实现状态逻辑复用，只要调用了这个高阶组件，就可以获得该高阶组件的状态;</p></blockquote><ul><li>高阶组件是一个函数，接收要包装的组件参数，==返回增强后的组件==</li><li>高阶组件不提供UI渲染逻辑，只提供状态</li><li>以with 开头， 参数以大写字母开头</li><li>在函数内部创建==类组件==，提供复用的状态逻辑代码 ==并返回==</li><li>在类组件中渲染参数是组件，同时将状态通过prop传递给参数组件</li><li>调用高阶组件，传入要增强的组件</li></ul><blockquote><p>问题: 组件名字相同</p><p>解决: 设置displayName </p></blockquote><p><img src="/.com//image-20221116172623043.png" alt="image-20221116172623043"></p><p><img src="/.com//image-20221116172658107.png" alt="image-20221116172658107"></p><blockquote><p>问题：传递props 丢失</p></blockquote><p>原因：高阶组件不会向下传递props</p><p>解决： 传递this.props 参数</p><p><img src="/.com//image-20221117091321965.png" alt="image-20221117091321965"></p><h3 id="组件更新机制"><a href="#组件更新机制" class="headerlink" title="组件更新机制"></a>组件更新机制</h3><blockquote><p>父组件重新渲染，子组件也会重新渲染，但只会渲染当前组件子树</p></blockquote><h3 id="组件性能优化"><a href="#组件性能优化" class="headerlink" title="组件性能优化"></a>组件性能优化</h3><ul><li><p>state 只存储跟组件==渲染相关==的数据，其他的数据可以放在 ==this==中 作为共享</p></li><li><p><strong>避免不必要的重新渲染</strong></p><p>解决方式：使用钩子函数==<code>shouldComponentUpdate(nextProps,nextState)</code>== //参数表示最新的状态，可以做判断操作</p><ul><li><p>执行时机：在组件更新阶段，重新渲染之前执行</p></li><li><p>通过<code>this.state </code> 可以获取更新前的状态</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params">nextProps,nextState</span>)</span> &#123;</span><br><span class="line"><span class="comment">//根据条件，决定是否重新渲染组件</span></span><br><span class="line">    ...</span><br><span class="line">        nextProps<span class="comment">//当前的状态</span></span><br><span class="line">        <span class="built_in">this</span>.state <span class="comment">//新前的状态</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">this</span>.state.xxx === nextState.xxx)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">//if的简写</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.state.xxx !== nextState.xxx</span><br><span class="line">&#125;</span><br><span class="line">    render () &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>纯组件 <strong>PureComponent</strong></p><p><strong>会自动对比state 和props  ，决定是否更新渲染</strong></p></li></ul><p><img src="/.com//image-20221117100154129.png" alt="image-20221117100154129"></p><blockquote><p>注意：纯组件对比是==浅层对比==</p><ul><li>值类型直接比较是否相同</li><li>引用类型Object 比较的是引用的地址</li></ul></blockquote><blockquote><p>解决办法：</p><p><strong>创建新的数据</strong></p><p><img src="/.com//image-20221117100935073.png" alt="image-20221117100935073"></p><p><img src="/.com//image-20221117100836395.png" alt="image-20221117100836395"></p></blockquote><h3 id="Hooks-组件"><a href="#Hooks-组件" class="headerlink" title="Hooks 组件"></a>Hooks 组件</h3><blockquote><p><strong>什么时候我会用 Hook？</strong> 如果你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其转化为 class。现在你可以在现有的函数组件中使用 Hook。</p></blockquote><p>Hook API</p><ul><li><code>useSate</code></li><li><code>useEffect</code></li></ul><h4 id="useState"><a href="#useState" class="headerlink" title="*useState"></a>*useState</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明一个叫 “count” 的 state 变量</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>参数：<code>useState()</code> 方法里面唯一的参数就是初始 state。</p><p>返回值：当前 state值 、一个更新 state 的函数</p><blockquote><p><code>useState</code> 不会自动合并更新对象</p></blockquote><h4 id="useEffect"><a href="#useEffect" class="headerlink" title="*useEffect"></a>*useEffect</h4><p><strong>理解副作用</strong></p><blockquote><p>对于react组件来说，主作用就是根据数据 （state、props）渲染UI，除此之外都是副作用（例如：手动修改DOM）</p><p>常见的副作用：</p><ul><li>数据请求ajax</li><li>手动修改DOM</li><li>localStorage 操作</li></ul></blockquote><blockquote><p><code>useEffect </code>同时融合了 <code>componentDidUpdata</code> 生命周期,专门用来处理那些不能直接写在组件内部的代码。</p></blockquote><p>参数：</p><ul><li>回调函数：编写副作用处理（DOM操作，异步请求、修改数据状态等）</li><li>回调函数依赖的值 <ul><li>不添加依赖 ，则不管是哪个状态更改引起组件更新时都会重新执行（初次渲染和组件更新）</li><li>如果第二个参数为 ==空数组==，表示该副作用不依赖任何值的变化，只会在组件完成初次渲染后执行一次。(适合ajax请求)</li><li> <strong>添加特定依赖项</strong> 副作用函数在首次渲染时执行，在依赖项==发生变化时重新执行==</li></ul></li></ul><p><strong>返回值：回调函数——清理副作用</strong></p><blockquote><p>如果想要清理副作用 可以在副作用函数中的末尾return一个新的函数，在新的函数中编写清理副作用的逻辑</p><p>注意执行时机为：</p><ol><li>组件卸载时自动执行</li><li>组件更新时，下一个useEffect副作用函数执行之前自动执行</li></ol></blockquote><p><strong>useEffect 发送网络请求封装：</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function">()=&gt;</span>&#123;   </span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchData</span>(<span class="params"></span>)</span>&#123;      </span><br><span class="line">       <span class="keyword">const</span> res = <span class="keyword">await</span> axios.get(<span class="string">&#x27;http://geek.itheima.net/v1_0/channels&#x27;</span>)                            <span class="built_in">console</span>.log(res)   </span><br><span class="line">    &#125; </span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure><h4 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h4><p><code>useReducer(reducer,state,initStateFun)</code></p><p>参数</p><ol><li>状态更新的reducer</li><li>初始值 state</li><li>  initStateFun是初始值的拦截函数，决定真正的state</li></ol><p>返回值：</p><h4 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h4><p>需要读取哪个父级传递的Context，就使用useContext(父级通过createContext()创建的Context对象)</p><ol><li>使用<code>createContext</code> 创建Context对象</li><li>在顶层组件通过<code>Provider</code> 提供数据</li><li>在底层组件通过<code>useContext</code>函数获取数据</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 创建Context对象</span></span><br><span class="line"><span class="keyword">const</span> Context = createContext()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Foo <span class="tag">&lt;<span class="name">Bar</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// 底层组件通过useContext函数获取数据  </span></span><br><span class="line">    <span class="keyword">const</span> name = useContext(Context)  </span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Bar &#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (    </span><br><span class="line">        <span class="comment">// 顶层组件通过Provider 提供数据    </span></span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;</span>&#x27;<span class="attr">this</span> <span class="attr">is</span> <span class="attr">name</span>&#x27;&#125;&gt;</span>     </span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">Foo</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span>  </span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><p>调用了 <code>useContext</code> 的组件总会在 context 值变化时重新渲染。</p><h4 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h4><p>可以在函数组件中获取真实的dom元素对象或者是==类组件对象==。</p><p>参数：</p><ol><li>执行 <code>useRef</code> 函数并传入null，返回值为一个对象, 内部有一个current属性存放拿到的dom对象（组件实例）</li><li>通过ref 绑定 要获取的元素或者组件</li><li>通过<code>变量.current</code>即可访问，它可以调用DOM对象的各种==方法和属性==</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">const</span> h1Ref = useRef(<span class="literal">null</span>)  </span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;    </span><br><span class="line">        <span class="built_in">console</span>.log(h1Ref)  </span><br><span class="line">    &#125;,[])  </span><br><span class="line">    <span class="keyword">return</span> (    </span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>      </span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">&#123;</span> <span class="attr">h1Ref</span> &#125;&gt;</span>this is h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  </span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>函数组件由于没有实例，不能使用ref获取，如果想获取组件实例，必须是==类组件==</p></blockquote><h4 id="useCallback—记忆函数"><a href="#useCallback—记忆函数" class="headerlink" title="useCallback—记忆函数"></a>useCallback—记忆函数</h4><p>防止因为组件重新渲染，导致方法被重新创建，起到缓存作用，只有第二个参数变化了，才会重新声明一次.避免非必要渲染.</p><ul><li>仅当依赖的属性变化才会更新</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedCallback = useCallback(</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    doSomething(a, b);</span><br><span class="line">  &#125;,</span><br><span class="line">  [a, b],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h4><p>useMemo和useCallback十分相似，useCallback用来缓存函数对象（不会执行函数），useMemo用来缓存函数的执行结果（函数已经执行）。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = useMemo(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> 复杂逻辑函数();</span><br><span class="line">&#125;,[依赖项])</span><br></pre></td></tr></table></figure><p>==useMemo中的函数会在依赖项发生变化时执行==,执行后返回执行结果，如果依赖项不发生变化，则一直会返回上次的结果，不会再执行函数。</p><h4 id="自定义HOOks"><a href="#自定义HOOks" class="headerlink" title="自定义HOOks"></a>自定义HOOks</h4><p>复用逻辑</p><p><strong>自定义一个hook函数，实现获取滚动距离Y</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useWindowScroll</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [y, setY] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> h = <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">    setY(h)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> [y]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需求描述：</strong> 自定义hook函数，可以自动同步到本地LocalStorage</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [message, setMessage] = useLocalStorage(key，defaultValue)</span><br></pre></td></tr></table></figure><ol><li>message可以通过自定义传入默认初始值</li><li>每次修改message数据的时候 都会自动往本地同步一份</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useLocalStorage</span> (<span class="params">key, defaultValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [message, setMessage] = useState(defaultValue)</span><br><span class="line">  <span class="comment">// 每次只要message变化 就会自动同步到本地ls</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.localStorage.setItem(key, message)</span><br><span class="line">  &#125;, [message, key])</span><br><span class="line">  <span class="keyword">return</span> [message, setMessage]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚拟DOM-和Diff算法"><a href="#虚拟DOM-和Diff算法" class="headerlink" title="虚拟DOM 和Diff算法"></a>虚拟DOM 和Diff算法</h3><h4 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h4><blockquote><p>虚拟DOM是一个JS对象，就是React元素</p></blockquote><p>在调用render()方法后，根据 ==JSX和状态state==生成虚拟DOM</p><h4 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h4><p>比较新旧虚拟DOM，更新变化的局部DOM</p><h2 id="React-路由"><a href="#React-路由" class="headerlink" title="React 路由"></a>React 路由</h2><blockquote><p> 路由是 URL 路径和 组件的映射关系</p></blockquote><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>安装</p><p><code>npm i react-router-dom</code></p><ol><li><p>导入 Router 、Route 、Link</p></li><li><p>使用 <code>&lt;Router&gt;&lt;/Router&gt;</code> 组件包裹的的才有跳转</p></li><li><p>Link 指定路由入口 导航菜单</p><blockquote><p>被编译成a标签</p></blockquote></li><li><p>Route 指定路由出口</p><ul><li>path属性：路由规则</li><li>component属性：展示的组件</li><li>Route组件写在哪，渲染出来的组件就展示在哪<br><code>&lt;Route path=&quot;/first&quot; component=&#123;Fisrt)&gt;&lt;/Route&gt;</code></li></ul></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;BrowserRouter <span class="keyword">as</span> Router, Route, Link&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line">&lt;Router&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/index&#x27;</span>  <span class="attr">component</span>=<span class="string">&#123;Hello&#125;</span> &gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">&lt;/Router&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//v6版本</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Hello</span>/&gt;</span>&#125; &gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span>  <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/mine&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Mine</span>/&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><p><strong>v6 v5差别</strong></p><ol><li><p><code>Routes</code> 组件替换 <code>v5</code> 的 <code>Switch</code> 组件，<code>Route</code> 组件必须使用 <code>Routes</code> 嵌套</p></li><li><p>跳转：</p><ol><li><p>通过 <code>Link</code> 组件跳转；、</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to=<span class="string">&quot;/goods&quot;</span>&gt; to Goods&lt;/Link&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>useNavigate</code> 方法跳转；</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useNavigate &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Goods</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> navigate = useNavigate();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClickToHome = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    navigate(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// history 的 replace 模式</span></span><br><span class="line">    <span class="comment">// navigate(&quot;/&quot;, &#123; replace: true &#125;);</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Goods Page<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClickToHome&#125;</span>&gt;</span>to Home<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>v6</code> 移除了 <code>Redirect</code> 组件，改用 <code>Navigate</code> 组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Route, Routes, Navigate &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line">&#123;<span class="comment">/* 重定向到首页 */</span>&#125;</span><br><span class="line">&lt;Route path=<span class="string">&quot;*&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span>&#125; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>嵌套路由的 <code>path</code> 可以不用写父级，会直接拼接；</p></li><li><p>动态路由通过 <code>:style</code> 的形式实现；</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> &#123;<span class="comment">/* 动态路由 */</span>&#125;</span><br><span class="line">&lt;Route path=<span class="string">&quot;:id&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">GoodsDetail</span> /&gt;</span></span>&#125;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>嵌套路由必须在父级追加<code>Outlet</code> 组，作为子级组件的占位符，类似于 <code>vue-router</code> 中的 <code>router-view</code> 。</p></li></ol></li></ol></li><li><p>HashRouter  BrowserRouter</p></li><li><p>默认路由：/</p></li></ul><h4 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h4><p>只要在最后加入 <code>path</code> 为 <code>*</code> 的一个路径，意为匹配所有路径，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Routes&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Layout</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">index</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Board</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;article&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Article</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;*&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">NotFound</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">&lt;/Routes&gt;</span><br></pre></td></tr></table></figure><h4 id="NavLink-标签"><a href="#NavLink-标签" class="headerlink" title="NavLink 标签"></a>NavLink 标签</h4><p>和 Link 标签作用相同的，但是它又比 Link 更加强大。 </p><p>选中某个 NavLink 标签时，就会自动的在类上添加一个 <code>active</code> 属性</p><p><strong>封装NavLink:</strong></p><ol><li><p>新建一个 MyNavLink 组件<code>return</code> 一个结构</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过&#123;...对象&#125;的形式解析对象，相当于将对象中的属性全部展开</span></span><br><span class="line">&lt;NavLink className=<span class="string">&quot;list-group-item&quot;</span> &#123;...this.props&#125; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>调用：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">/*将NavLink进行封装，成为MyNavLink,通过props进行传参数，标签体内容props是特殊的一个属性，叫做children */</span>&#125;</span><br><span class="line">&lt;MyNavLink to=<span class="string">&quot;/home&quot;</span>&gt;home&lt;/MyNavLink</span><br></pre></td></tr></table></figure></li></ol><h4 id="useRoutes-集中路由配置"><a href="#useRoutes-集中路由配置" class="headerlink" title="useRoutes 集中路由配置"></a>useRoutes 集中路由配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useRoutes()</span><br></pre></td></tr></table></figure><ul><li>作用：根据路由表，动态创建<code>&lt;Routes&gt;</code>和<code>&lt;Route&gt;</code>。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = useRoutes([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&quot;home&quot;</span>,</span><br><span class="line">      <span class="attr">element</span>:<span class="xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&quot;about&quot;</span>,</span><br><span class="line">      <span class="attr">element</span>:<span class="xml"><span class="tag">&lt;<span class="name">About</span>/&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">element</span>:<span class="xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>/&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">  ])</span><br><span class="line"> <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;element&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Routes, Route, useRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&#x27;./pages/Layout&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Board <span class="keyword">from</span> <span class="string">&#x27;./pages/Board&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Article <span class="keyword">from</span> <span class="string">&#x27;./pages/Article&#x27;</span></span><br><span class="line"><span class="keyword">import</span> NotFound <span class="keyword">from</span> <span class="string">&#x27;./pages/NotFound&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 准备一个路由数组 数组中定义所有的路由对应关系</span></span><br><span class="line"><span class="keyword">const</span> routesList = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Layout</span> /&gt;</span></span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Board</span> /&gt;</span></span>,</span><br><span class="line">        index: <span class="literal">true</span>, <span class="comment">// index设置为true 变成默认的二级路由</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;article&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Article</span> /&gt;</span></span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 增加n个路由对应关系</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">NotFound</span> /&gt;</span></span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用useRoutes方法传入routesList生成Routes组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WrapperRoutes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> element = useRoutes(routesList)</span><br><span class="line">  <span class="keyword">return</span> element</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;/* 3. 替换之前的Routes组件 */&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">WrapperRoutes</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><ul><li>push /go</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.props.history.push(<span class="string">&#x27;/page&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>useNavigate 钩子函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useNavigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 执行函数</span></span><br><span class="line">  <span class="keyword">const</span> navigate = useNavigate()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      Home</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> ()=&gt;</span> navigate(&#x27;/about&#x27;) &#125;&gt; 跳转关于页 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home</span><br></pre></td></tr></table></figure><blockquote><p>如果在跳转时不想添加历史记录，可以添加额外参数replace 为true</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigate(<span class="string">&#x27;/about&#x27;</span>, &#123; <span class="attr">replace</span>: <span class="literal">true</span> &#125; )</span><br></pre></td></tr></table></figure></blockquote></li></ul><p><strong>匹配模式</strong></p><ul><li><p>模糊匹配</p><p>React 中默认开启的是模糊匹配</p><ul><li>```jsx<br><MyNavLink to="/home/a/b">Home</MyNavLink><br>此时该标签匹配的路由，分为三个部分 home a b；将会根据这个先后顺序匹配路由。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 根据路径一级一级查询的，可以包含前面那一部分，但并不是只包含部分就可以。</span><br><span class="line"></span><br><span class="line">- 精准匹配</span><br><span class="line"></span><br><span class="line">  `exact=&#123;true&#125;`</span><br><span class="line"></span><br><span class="line">  ```jsx</span><br><span class="line">  &lt;Route exact=&#123;true&#125;  path=&quot;/home&quot; component=&#123;Home&#125;/&gt;</span><br><span class="line">  或者</span><br><span class="line">  &lt;Route exact path=&quot;/home&quot; component=&#123;Home&#125;/&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h3><ol><li>可以直接Route嵌套</li></ol><p> 需要在一级路由为二级路由留出口<code>&lt;Outlet&gt;</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;Routes&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span>  <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Layout</span>/&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;board&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span> &lt;<span class="attr">Board</span>/&gt;</span> &#125; /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;article&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span> &lt;<span class="attr">Article</span>/&gt;</span> &#125; /&gt;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">   &#123; <span class="comment">/* 省略部分  */</span> &#125;</span><br><span class="line">&lt;/Routes&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//父组件中 </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/board&quot;</span>&gt;</span>board<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/article&quot;</span>&gt;</span>article<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line">&#123; <span class="comment">/* 二级路由出口 */</span> &#125;</span><br><span class="line">&lt;Outlet/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用 <strong><code>children</code></strong> 来嵌套路由，子路由 不加/</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Navigate &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Center <span class="keyword">from</span> <span class="string">&quot;../views/Center&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Cinema <span class="keyword">from</span> <span class="string">&quot;../views/Cinema&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Film <span class="keyword">from</span> <span class="string">&quot;../views/Film&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;../views/Home&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/center&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Center</span> /&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&quot;cinema&quot;</span>,</span><br><span class="line">                <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Cinema</span> /&gt;</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&quot;film&quot;</span>,</span><br><span class="line">                <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Film</span> /&gt;</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/center&quot;</span> /&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes;</span><br><span class="line">        </span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; NavLink,Outlet &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home 组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/center&quot;</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home/cinema&quot;</span>&gt;</span>影院<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home/film&quot;</span>&gt;</span>电影<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&lt;Outlet&gt;</code></p><p>作用：当<code>&lt;Route&gt;</code>产生嵌套时，渲染其对应的后续子路由。</p><blockquote><p><strong>默认需要显示二级路由时</strong></p><p>场景: 应用首次渲染完毕就需要显示的二级路由</p><p>实现步骤:</p><ol><li>给默认二级路由标记index属性</li><li>把原本的路径path属性去掉</li></ol><p>App.jsx:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Routes&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span>  <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Layout</span>/&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">index</span> <span class="attr">element</span>=<span class="string">&#123;</span> &lt;<span class="attr">Board</span>/&gt;</span> &#125; /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;article&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span> &lt;<span class="attr">Article</span>/&gt;</span> &#125; /&gt;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">&lt;/Routes&gt;</span><br></pre></td></tr></table></figure><p>pages/Layout.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Outlet &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Layout = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      layout</span></span><br><span class="line"><span class="xml">      &#123; /* 默认二级不再具有自己的路径  */ &#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>board<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/article&quot;</span>&gt;</span>article<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123; /* 二级路由出口 */ &#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><p>在注册路由时，<code>:参数名</code>传递数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">&quot;/home/message/detail/:id/:title&quot;</span> component=&#123;Detail&#125; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to=&#123;<span class="string">`/home/message/detail/<span class="subst">$&#123;msgObj.id&#125;</span>/<span class="subst">$&#123;msgObj.title&#125;</span>`</span>&#125;&gt;&#123;msgObj.title&#125;&lt;/Link&gt;</span><br></pre></td></tr></table></figure><h4 id="searchParams-传参"><a href="#searchParams-传参" class="headerlink" title="searchParams 传参"></a>searchParams 传参</h4><p>传参</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigate(<span class="string">&#x27;/about?id=1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>接收参数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [params] = useSearchParams()</span><br><span class="line"><span class="keyword">let</span> id = params.get(<span class="string">&#x27;id&#x27;</span>)</span><br></pre></td></tr></table></figure><p>获取search参数，有两种写法：</p><ol><li>使用useSearchParams</li><li>使用useLocation</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&quot;qs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;search&#125; = useLocation();</span><br><span class="line"><span class="keyword">const</span> &#123;id,title,content&#125; = qs.parse(search.slice(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h4 id="params-传参"><a href="#params-传参" class="headerlink" title="params 传参"></a>params 传参</h4><p>传参</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">navigate(<span class="string">&#x27;/about/1&#x27;</span>)</span><br><span class="line">---------</span><br><span class="line"><span class="keyword">const</span> navigate = useNavigate();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">msgObj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;id,title,content&#125; = msgObj</span><br><span class="line">    navigate(<span class="string">`detail/<span class="subst">$&#123;id&#125;</span>/<span class="subst">$&#123;title&#125;</span>/<span class="subst">$&#123;content&#125;</span>`</span>,&#123;<span class="attr">replace</span>:<span class="literal">false</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> params = useParams()</span><br><span class="line"><span class="keyword">let</span> id = params.id</span><br></pre></td></tr></table></figure><p>获取params参数有两种方式：</p><ol><li><p>使用 <strong>useParams</strong> </p><p><code>const &#123;id,title,content&#125; = useParams();</code></p></li><li><p>使用 <strong>useMatch</strong> </p><p><code>const &#123;params:&#123;id,title,content&#125;&#125;= useMatch(&quot;/home/message/detail/:id/:title/:content&quot;);</code></p></li></ol><h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><p>项目没用到 ，以后再学</p><h2 id="mobx"><a href="#mobx" class="headerlink" title="mobx"></a>mobx</h2><ul><li>对一份数据直接进行修改操作，不需要始终返回一个新的数据</li><li>并非单一store ，可以多个store</li></ul><p>使用规则</p><p><code>npm i mobx</code></p><p><code>npm i mobx-react-lite</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;observable,autorun&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> observableNumber = observable.box(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>autorun 只有相关的属性改变才会执行</p><p>store文件</p><p><strong>初始化mobx</strong></p><ol><li>定义数据状态</li><li>数据响应式处理</li><li>定义action函数</li><li>实例化并导出犀利</li></ol><p><strong>使用store</strong></p><ol><li>导入store实例对象</li><li>使用实例对象的方法和属性</li><li>通过事件调用修改数据的方法修改store中的数据</li><li>让组件数据响应式 observe</li></ol><p><img src="/.com//image-20221213141505716.png" alt="image-20221213141505716"></p><p>计算属性</p><ol><li>通过get关键词 定义计算属性</li><li>在 makeAutoObservable 方法中标记计算属性</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed, makeAutoObservable &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterStore</span> </span>&#123;</span><br><span class="line">  list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    makeAutoObservable(<span class="built_in">this</span>, &#123;</span><br><span class="line">      <span class="attr">filterList</span>: computed</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 修改原数组</span></span><br><span class="line">  changeList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.list.push(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义计算属性</span></span><br><span class="line">  get filterList () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list.filter(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">4</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="keyword">new</span> CounterStore()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counter</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221216150602398.png" alt="image-20221216150602398"></p><h2 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h2><p>module .css</p><ol><li><p>sass 以及反向代理配置</p></li><li><p>路由配置</p><ul><li>新建文件夹router</li><li>import 引入</li></ul></li></ol><p>​    </p><h3 id="文章发布管理平台"><a href="#文章发布管理平台" class="headerlink" title="文章发布管理平台"></a>文章发布管理平台</h3><p>1、创建项目 npx create-react-app </p><p><img src="/.com//image-20221219091349589.png" alt="image-20221219091349589"></p><p>2、配置路由 </p><p>3、引入antD</p><p><img src="/.com//image-20221219105311247.png" alt="image-20221219105311247"></p><blockquote><p>如果想配置webpack  可以使用释放eject</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+PicGo图床</title>
      <link href="/2022/11/03/GitHub-PicGo%E5%9B%BE%E5%BA%8A/"/>
      <url>/2022/11/03/GitHub-PicGo%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p><strong>使用 PicGo 可以实现自动上传图片。</strong>简单几步，就能完成。</p><p>测试图片加载是否成功</p><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211032112863.png" alt="image-20221103211212826"></p><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211031933162.png" alt="image-20221103193300116"></p><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211041516520.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node学习</title>
      <link href="/2022/09/07/node%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/09/07/node%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Node学习"><a href="#Node学习" class="headerlink" title="Node学习"></a>Node学习</h2><h2 id="Node运行环境"><a href="#Node运行环境" class="headerlink" title="Node运行环境"></a>Node运行环境</h2><p>JavaScript V8，解析JavaScript代码</p><p>内置API由运行华宁提供的特殊接口</p><p>运行Node的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure><p>退出node.js程序</p><p>控制台中运行程序时，可以用 <code>ctrl-C</code> 关闭它</p><p>以编程的方式退出：</p><p><code>process.exit()；</code></p><h2 id="Fs-文件操纵模块"><a href="#Fs-文件操纵模块" class="headerlink" title="Fs 文件操纵模块"></a>Fs 文件操纵模块</h2><p><img src="/.com//1662277691720.png"></p><p>导入：<br><code>const fs =require(&#39;fs&#39;)</code></p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p><strong>fs.readFile()</strong></p><p>向其传入<code>文件路径</code>、<code>编码格式</code>、以及会带上文件数据（以及错误）进行调用的<code>回调函数</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&#x27;/Users/joe/test.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span> , <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p><code>fs.writeFile(file,data,[options],callback) </code></p><p><img src="/.com//1662278116897.png"></p><p>默认情况下，此 API 会替换文件的内容（如果文件已经存在直接覆盖）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> content = <span class="string">&#x27;一些内容&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = fs.writeFileSync(<span class="string">&#x27;/Users/joe/test.txt&#x27;</span>, content)</span><br><span class="line">  <span class="comment">//文件写入成功。</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="追加到文件"><a href="#追加到文件" class="headerlink" title="追加到文件"></a>追加到文件</h4><p> <code>fs.appendFile()</code> 向文件追加内容 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> content = <span class="string">&#x27;一些内容&#x27;</span></span><br><span class="line"></span><br><span class="line">fs.appendFile(<span class="string">&#x27;file.log&#x27;</span>, content, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//完成！</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="路径动态拼接问题"><a href="#路径动态拼接问题" class="headerlink" title="路径动态拼接问题"></a>路径动态拼接问题</h3><p>在使用fs 模块操作文件时，如果提供的操作路径是以/或../开头的<strong>相对路径</strong>时，很容易出现路径动态拼接错误的问题。</p><p>原因：代码在运行的时候，会以执行<strong>node命令时所处的目录，动态拼接出被操作文件的完整路径</strong>。</p><p>解决： </p><ol><li><p>提供完整的绝对路径（移植性差）</p></li><li><p><code>__dirname</code> 获取路径</p><p>__dirname + 文件相对路径</p><p><img src="/.com//1662279510608.png" alt="1662279510608"></p></li></ol><h2 id="path路径模块"><a href="#path路径模块" class="headerlink" title="path路径模块"></a>path路径模块</h2><p><strong>引入模块</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><ul><li><p>从路径中获取信息：</p><p>给定一个路径，可以使用以下方法从其中提取信息：</p><ul><li><code>dirname</code>: 获取文件的父文件夹。</li><li><code>basename</code>: 获取文件名部分。</li><li><code>extname</code>: 获取文件的<strong>扩展名</strong>。</li></ul><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> notes = <span class="string">&#x27;/users/joe/notes.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">path.dirname(notes) <span class="comment">// /users/joe</span></span><br><span class="line">path.basename(notes) <span class="comment">// notes.txt</span></span><br><span class="line">path.extname(notes) <span class="comment">// .txt</span></span><br></pre></td></tr></table></figure><p>可以通过为 <code>basename</code> 指定第二个参数来获取不带扩展名的文件名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.basename(notes, path.extname(notes)) <span class="comment">//notes</span></span><br></pre></td></tr></table></figure></li><li><p>路径拼接 <code>path.join()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;joe&#x27;</span></span><br><span class="line">path.join(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;users&#x27;</span>, name, <span class="string">&#x27;notes.txt&#x27;</span>) <span class="comment">//&#x27;/users/joe/notes.txt&#x27;</span></span><br></pre></td></tr></table></figure><p><code>../</code>会抵消前面的路径</p><p><img src="/.com//1662280195403.png" alt="1662280195403"></p></li><li><p><code>path.resolve()</code> 获得相对路径的绝对路径计算：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.resolve(<span class="string">&#x27;joe.txt&#x27;</span>) <span class="comment">//&#x27;/Users/joe/joe.txt&#x27; 如果从主文件夹运行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>path.normalize()</code> 是另一个有用的函数，当包含诸如 <code>.</code>、<code>..</code> 或双斜杠之类的相对说明符时，其会尝试计算实际的路径：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.normalize(<span class="string">&#x27;/users/joe/..//test.txt&#x27;</span>) <span class="comment">//&#x27;/users/test.txt&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解析和规范化都不会检查路径是否存在。 其只是根据获得的信息来计算路径。</p></li></ul><h2 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h2><p>用来创建web服务器的模块，通过http模块提供的http.createServer() 方法，就能把一台普通的电脑，变成一台Web服务器，从而对外提供Web资源服务。</p><p>搭建HTTP web服务器示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>) <span class="comment">//导入http模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span> <span class="comment">//指定在3000端口监听,服务器就绪时，则 listen 回调函数会被调用。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span> <span class="comment">//设置 statusCode 属性为 200，以表明响应成功。</span></span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">  res.end(<span class="string">&#x27;你好世界\n&#x27;</span>) <span class="comment">//结束并关闭响应，将内容作为参数添加到 end()</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`服务器运行在 http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>req 请求对象</strong></p><p>设置Content-Type响应头防止乱码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>res 响应对象</p><h3 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h3><ul><li>GET请求</li><li>POST请求</li><li>PUT和DElETE请求</li></ul><p><strong>GET请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">hostname</span>: <span class="string">&#x27;nodejs.cn&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">443</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/todos&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = https.request(options, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`状态码: <span class="subst">$&#123;res.statusCode&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">  res.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">d</span> =&gt;</span> &#123;</span><br><span class="line">    process.stdout.write(d)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">req.on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">req.end()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>POST请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">  <span class="attr">todo</span>: <span class="string">&#x27;做点事情&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">hostname</span>: <span class="string">&#x27;nodejs.cn&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">443</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/todos&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Length&#x27;</span>: data.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = https.request(options, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`状态码: <span class="subst">$&#123;res.statusCode&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">  res.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">d</span> =&gt;</span> &#123;</span><br><span class="line">    process.stdout.write(d)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">req.on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">req.write(data)</span><br><span class="line">req.end()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>PUT和DElete</strong></p><p>PUT 和 DELETE 请求使用相同的 POST 请求格式，只需更改 <code>options.method</code> 的值即可。</p><h4 id="使用Axios库执行HTTP请求"><a href="#使用Axios库执行HTTP请求" class="headerlink" title="使用Axios库执行HTTP请求"></a>使用Axios库执行HTTP请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"></span><br><span class="line">axios.post(<span class="string">&#x27;http://nodejs.cn/todos&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">todo</span>: <span class="string">&#x27;做点事情&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`状态码: <span class="subst">$&#123;res.statusCode&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="获取-HTTP-请求的正文数据"><a href="#获取-HTTP-请求的正文数据" class="headerlink" title="获取 HTTP 请求的正文数据"></a>获取 HTTP 请求的正文数据</h3><ul><li><p>如果使用的是 Express，则非常简单：使用 <code>body-parser</code> Node.js 模块。</p><p>例如，获取此请求的正文：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"></span><br><span class="line">axios.post(<span class="string">&#x27;http://nodejs.cn/todos&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">todo</span>: <span class="string">&#x27;做点事情&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应的服务器端代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(</span><br><span class="line">  express.urlencoded(&#123;</span><br><span class="line">    <span class="attr">extended</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.use(express.json())</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/todos&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body.todo)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>如果普通的 Node.js 中执行此操作，则需要做多一点的工作</p><p>首先，通过监听流的 <code>data</code> 事件来获取数据，然后在数据结束时调用一次流的 <code>end</code> 事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 可以访问 HTTP 请求头</span></span><br><span class="line">  req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`可用的数据块: <span class="subst">$&#123;chunk&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//数据结束</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若要访问数据（假设期望接收到字符串），则必须将其放入数组中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">    data += chunk;</span><br><span class="line">  &#125;)</span><br><span class="line">  req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">JSON</span>.parse(data).todo <span class="comment">// &#x27;做点事情&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p><img src="/.com//1662292940779.png" alt="1662292940779"></p><h3 id="model对象"><a href="#model对象" class="headerlink" title="model对象"></a>model对象</h3><p>Node.js 具有内置的模块系统。可以导入自定义的模块</p><p>可以通过两种方式进行操作。</p><ul><li><p>将对象赋值给 <code>module.exports</code>（这是模块系统提供的对象），这会使文件只导出该对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> car = &#123;</span><br><span class="line">  <span class="attr">brand</span>: <span class="string">&#x27;Ford&#x27;</span>,</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&#x27;Fiesta&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = car</span><br><span class="line"></span><br><span class="line"><span class="comment">//在另一个文件中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = <span class="built_in">require</span>(<span class="string">&#x27;./car&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>将要导出的对象添加为 <code>exports</code> 的属性。这种方式可以导出多个对象、函数或数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> car = &#123;</span><br><span class="line">  <span class="attr">brand</span>: <span class="string">&#x27;Ford&#x27;</span>,</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&#x27;Fiesta&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.car = car</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="built_in">exports</span>.car = &#123;</span><br><span class="line">  <span class="attr">brand</span>: <span class="string">&#x27;Ford&#x27;</span>,</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&#x27;Fiesta&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一个文件导入</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="built_in">require</span>(<span class="string">&#x27;./items&#x27;</span>)</span><br><span class="line">items.car</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="keyword">const</span> car = <span class="built_in">require</span>(<span class="string">&#x27;./items&#x27;</span>).car</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>module.exports</code> 和 <code>export</code> 之间有什么区别？</p><blockquote><p>前者公开了它指向的对象。 后者公开了它指向的对象的属性。</p></blockquote><p><strong>注意：</strong></p><blockquote><p>require导入模块时，导入结果以<strong>module.exports</strong>最后指向的<strong>对象</strong>为准。</p></blockquote><p>使用误区:</p><p><img src="/.com//1662361546673.png" alt="1662361546673"></p><p><img src="/.com//1662361744103.png" alt="1662361744103"></p><p>使用时不要将export和model.export混用。</p></li></ul><h3 id="模块加载机制"><a href="#模块加载机制" class="headerlink" title="模块加载机制"></a>模块加载机制</h3><ul><li>内置模块&gt;第三方</li><li>自定义模块加载必须加上‘./或../’开头的标识符。</li></ul><p><img src="/.com//../%E5%89%8D%E7%AB%AF/node%E5%AD%A6%E4%B9%A0/1662367084348.png" alt="1662367084348"></p><ul><li>第三方</li></ul><h2 id="npm-与-包"><a href="#npm-与-包" class="headerlink" title="npm 与 包"></a>npm 与 包</h2><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>1.包的来源：第三方模块，免费使用</p><p>2.包是基于内置模块封装出来，提供了更高级更方便的API，提高开发效率。</p><h3 id="npm包管理工具"><a href="#npm包管理工具" class="headerlink" title="npm包管理工具"></a>npm包管理工具</h3><p><a href="www.npmjs.com">www.npmjs.com</a></p><p>yarn是npm的一个替代选择。</p><p><strong>安装所有依赖</strong>：<code>npm install</code> 或 <code>npm i</code><br><strong>安装单个软件包</strong>：<code>npm install &lt;package-name&gt;</code></p><ul><li><p><code>--save</code> 安装并添加条目到 <code>package.json</code> 文件的 dependencies。</p></li><li><p><code>--save-dev</code>  或者 <code>-D</code> 安装并添加条目到 <code>package.json</code> 文件的 devDependencies。</p><p>区别主要是，<code>devDependencies</code> 通常是开发的工具（例如测试的库），而 <code>dependencies</code> 则是与生产环境中的应用程序相关,上线会用到的。</p></li></ul><p><strong>安装指定版本</strong>：</p><p><code>npm install &lt;package-name&gt;@version</code></p><p><strong>更新软件包</strong></p><p> <code>npm update</code></p><p><strong>运行任务</strong></p><p><code>npm run &lt;task-name&gt;</code></p><p><strong>package.json 包管理配置文件</strong></p><p><a href="http://nodejs.cn/learn/the-package-json-guide">package.json 指南 (nodejs.cn)</a></p><p>创建package.json </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/.com//1662363749684.png" alt="1662363749684"></p><p>参数说明：</p><ul><li><code>version</code> 表明了当前的版本。</li><li><code>name</code> 设置了应用程序/软件包的名称。</li><li><code>description</code> 是应用程序/软件包的简短描述。</li><li><code>main</code> 设置了应用程序的入口点。</li><li><code>private</code> 如果设置为 <code>true</code>，则可以防止应用程序/软件包被意外地发布到 <code>npm</code>。</li><li><code>scripts</code> 定义了一组可以运行的 node 脚本。</li><li><code>dependencies</code> 设置了作为依赖安装的 <code>npm</code> 软件包的列表。</li><li><code>devDependencies</code> 设置了作为开发依赖安装的 <code>npm</code> 软件包的列表。</li><li><code>engines</code> 设置了此软件包/应用程序在哪个版本的 Node.js 上运行。</li><li><code>browserslist</code> 用于告知要支持哪些浏览器（及其版本）。</li></ul><p><strong>卸载包</strong> </p><p><code>npm uninstall &lt;package-name&gt; </code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -S &lt;package-name&gt;</span><br><span class="line">npm uninstall -D &lt;package-name&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>淘宝镜像源：</strong></p><p>查看当前的下包镜像源</p><p><code>npm config get registry</code></p><p> 将下包的镜像源切换为淘宝镜像源<br><code> npm config set registry=https://registry.npm.taobao.org/</code></p><p>检查镜像源是否下载成功<br><code>npm config get registry</code></p><h3 id="包的分类"><a href="#包的分类" class="headerlink" title="包的分类"></a>包的分类</h3><ol><li><p>项目包</p><p>node_modules 目录中包</p><ul><li>开发依赖包  devDependencies</li><li>核心依赖包 dependencies节点中的包</li></ul></li><li><p>全局包</p><p>在执行npm install 命令时，如果提供了-g参数，则会把包安装为全局包。<br>全局包会被安装到C:\Users用户目录</p><blockquote><p>只有工具性质的包，才有全局安装的必要性。因为它们提供了好用的终端命令。</p></blockquote></li></ol><p><img src="/.com//1662364856514.png" alt="1662364856514"></p><h2 id="Express-模块"><a href="#Express-模块" class="headerlink" title="Express 模块"></a>Express 模块</h2><p>Express是基于HTTP模块进一步封装的。</p><h3 id="创建基本服务器"><a href="#创建基本服务器" class="headerlink" title="创建基本服务器"></a>创建基本服务器</h3><p>Express可以创建web网站的服务器或API接口的服务器</p><p>1、安装：<code>npm i express@4.17.1</code></p><p>2、创建基本本服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">//启动</span></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;express server running at http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常用方法：</p><p><strong>GET请求</strong></p><p><code>app.get()</code></p><p><strong>POST请求</strong></p><p><code>app.post()</code></p><p><strong>把内容响应给客户端</strong></p><p><code>res.send()</code></p><p><img src="/.com//1662368417863.png" alt="1662368417863"></p><p><strong>获取URL中携带的查询参数</strong></p><p><code>req.query</code></p><p><img src="/.com//1662368889961.png" alt="1662368889961"></p><p><strong>获取URL中的动态参数</strong></p><p><code>req.params</code> 通过: 匹配到动态参数</p><p><img src="/.com//1662369212384.png" alt="1662369212384"></p><p>3、托管静态资源</p><p><code>express.static()</code></p><p>例如，通过如下代码就可以将public目录下的图片、CSS文件、JavaScript文件对外开放访问了:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static( <span class="string">&quot;public&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>挂载路径前缀：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/home&#x27;</span>,express.static( <span class="string">&quot;public&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、<strong>nodemon</strong>工具——代码修改后自动重启项目</p><p>安装：<code>npm i -g nodemon</code></p><h3 id="Express路由"><a href="#Express路由" class="headerlink" title="Express路由"></a>Express路由</h3><p><strong>路由匹配过程：</strong></p><p>每当一个请求到达服务器之后，需要先经过路由的匹配，只有匹配成功之后，才会调用对应的处理函数。<br>在匹配时，会按照路由的<strong>顺序</strong>进行匹配，如果<strong>请求类型和请求的URL同时匹配成功</strong>，则 Express 会将这次请求，转交给对应的function函数进行处理。</p><h4 id="路由的使用"><a href="#路由的使用" class="headerlink" title="路由的使用"></a>路由的使用</h4><p><strong>1、把路由挂载到app上：</strong></p><p><code>app.METHOD(PATH, HANDLER) </code></p><p><img src="/.com//1662450966089.png" alt="1662450966089"></p><p><strong>2、路由模块化</strong></p><p>为了方便对路由进行模块化的管理，Express 不建议将路由直接挂载到app 上，而是推荐将路由抽离为单独的模块将路由抽离为单独模块的步骤如下:</p><ol><li>创建路由模块对应的.js文件</li><li>调用<code>express.Router()</code>函数创建路由对象</li><li>向路由对象上挂载具体的路由</li><li>使用<code>module.exports</code>向外共享路由对象</li><li>使用<code>app.use()</code>函数注册路由模块</li></ol><p>示例：router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/user/list&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;Get user list&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/user/add&#x27;</span>, <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;Post 请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>use</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>)</span><br><span class="line"><span class="comment">//注册</span></span><br><span class="line">app.use(router)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>路由模块添加前缀：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/api&#x27;</span>,router)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h3><p><strong>作用：</strong></p><p>当一个请求到达Express的服务器之后，可以连续调用多个中间件，从而对这次请求进行<strong>预处理</strong>。</p><p><strong>next函数的作用</strong><br>next函数是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件或路由。</p><p><strong>定义中间件函数：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最简单的中间件函数</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;最简单的中间件函数&#x27;</span>);</span><br><span class="line">    next()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册fn为全局生效的中间件</span></span><br><span class="line">app.use(fn)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/.com//1662452979341.png" alt="1662452979341"></p><p>多个中间件之间，共享同一份req和res。基于这样的特性，我们可以在上游的中间件中，统一为req或res对象添加自定义的属性或方法，供下游的中间件或路由进行使用。</p><p><strong>定义多个中间件：</strong><br>可以使用app.use()连续定义多个全局中间件。客户端请求到达服务器之后，会按照中间件定义的<strong>先后顺序依次执行</strong>。</p><p><strong>定义局部生效的中间件函数：</strong></p><p>==不使用app.use()==定义的中间件，叫做局部生效的中间件，示例代码如下:</p><p><img src="/.com//1662453571080.png" alt="1662453571080"></p><p><img src="/.com//1662453662904.png" alt="1662453662904"></p><p><strong>注意事项：</strong></p><ul><li>在路由之前注册中间件才会起作用</li><li>一定要调用next()</li><li>next()之后不要写额外的代码</li><li>连续调用多个中间件时，共享req和res对象</li></ul><h4 id="中间件分类"><a href="#中间件分类" class="headerlink" title="中间件分类"></a>中间件分类</h4><ol><li><p>应用级别中间件 绑定到app实例上</p></li><li><p>路由级别中间件 绑定到express.Router()实例上</p></li><li><p>错误级别中间件：</p><p><strong>作用：</strong>专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题。<br><strong>格式：</strong>错误级别中间件的 function处理函数中，必须有4个形参，形参顺序从前到后，分别是<code>(err, req, res, next)</code>。</p><blockquote><p>错误级别中间件应该注册到所有路由之后，捕获所有错误。</p></blockquote><p><img src="/.com//1662454118447.png" alt="1662454118447"></p></li><li><p>Express内置中间件</p><ul><li><code>express.static</code>快速托管静态资源的内置中间件，例如: HTML文件、图片、CSS样式等(无兼容性)</li><li><code>express.json</code><strong>解析JSON格式的请求体数据</strong>（有兼容性，仅在4.16.0+版本中可用)</li><li><code>express.urlencoded</code>解析 URL-encoded格式的请求体数据（有兼容性，仅在4.16.0+版本中可用)</li></ul><p><img src="/.com//1662454449286.png" alt="1662454449286"></p></li><li><p>第三方中间件</p><p><img src="/.com//1662455019897.png" alt="1662455019897"></p></li></ol><h4 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h4><p>实现步骤:</p><ol><li>定义中间件</li><li>监听req的data事件</li><li>监听req的end 事件</li><li>使用querystring模块解析请求体数据</li><li>将解析出来的数据对象挂载为req.body</li><li>将自定义中间件封装为模块</li></ol><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req，res，next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//定义中间件具体的业务逻辑</span></span><br><span class="line"><span class="comment">// 1.定义一个 str字符串，专门用来存储客户端发送过来的</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&quot;</span></span><br><span class="line"><span class="string">//2.监听req的 data事件</span></span><br><span class="line"><span class="string">    req.on( &#x27;data&#x27;，(chunk) =&gt;&#123;</span></span><br><span class="line"><span class="string">        str += chunk</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    //3．监听req的end事件</span></span><br><span class="line"><span class="string">    req.on( &#x27;end&#x27;，() =&gt;&#123;</span></span><br><span class="line"><span class="string">//在str 中存放的是完整的请求体数据</span></span><br><span class="line"><span class="string">      console.log(str)// TODO:把字符串格式的请求体数据，解析成对象格式</span></span><br><span class="line"><span class="string">       const body =  qs.parse(str)//导入querystring模块，调用parse()函数</span></span><br><span class="line"><span class="string">       req.body = body;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        next()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="使用Express写接口"><a href="#使用Express写接口" class="headerlink" title="使用Express写接口"></a>使用Express写接口</h3><p>1.定义路由接口模块 router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">//get接口</span></span><br><span class="line">router.get(<span class="string">&#x27;/get&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> query = req.query</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;GET请求成功&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: query</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//post接口</span></span><br><span class="line">router.post(<span class="string">&#x27;/post&#x27;</span>, <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> body = req.body</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;POST请求成功&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: body</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//delete接口</span></span><br><span class="line">router.delete(<span class="string">&#x27;/delete&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.全局注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(express.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决跨域</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line">app.use(cors) </span><br><span class="line"></span><br><span class="line"><span class="comment">//导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router/router&#x27;</span>)</span><br><span class="line">app.use(<span class="string">&#x27;/api&#x27;</span>,router)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//启动</span></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;express server running at http://127.0.0.1:3000&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="接口跨域问题"><a href="#接口跨域问题" class="headerlink" title="接口跨域问题"></a>接口跨域问题</h4><p>1、基于cors解决</p><p><img src="/.com//1662461491945.png" alt="1662461491945"></p><p>主要在服务端配置，客户端无需配置</p><p>**原理: ** <code>Access-Control-Allow-Orgin: *</code></p><p><strong>一些CORS的知识扩展</strong></p><p><img src="/.com//1662461840754.png" alt="1662461840754"></p><p><img src="/.com//1662461871685.png" alt="1662461871685"></p><p><img src="/.com//1662461985474.png" alt="1662461985474"></p><blockquote><p>在浏览器与服务器正式通信之前，浏览器会先发送ОPTION请求进行预检，以获知服务器是否允许该实际请求，所以这一次的OPTION请求称为“预检请求”。服务器成功响应预检请求后，分会发送真正的请求，并且携带真实数据。</p></blockquote><p>2、JSONP 解决：有缺陷，只适合GET的跨域</p><p><img src="/.com//1662462205743.png" alt="1662462205743"></p><p>==JSONP接口配置要在CORS之前==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置JSONP接口示例</span></span><br><span class="line">app.get(<span class="string">&#x27;/api/JSONP&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fun = req.query.callback<span class="comment">//得到函数名称</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>: <span class="string">&#x27;aa&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span>&#125;<span class="comment">//定义发送到客户端的数据对象</span></span><br><span class="line">    <span class="keyword">const</span> scriptStr = <span class="string">`<span class="subst">$&#123;fun&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span><span class="comment">//拼接出一个函数调用</span></span><br><span class="line">    res.send(scriptStr)<span class="comment">//响应给客户端</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/.com//1662462658472.png" alt="1662462658472"></p><h3 id="在Express中使用MySQL"><a href="#在Express中使用MySQL" class="headerlink" title="在Express中使用MySQL"></a>在Express中使用MySQL</h3><p><strong>步骤：</strong></p><ol><li>安装第三方模块 mysql</li><li>通过mysql模块连接到MySQL数据库</li><li>通过myql模块执行sql语句</li></ol><p><strong>配置mysql模块</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> db = mysql.createPool(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试模块是否正常工作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试mysql模块是否正常工作</span></span><br><span class="line">db.query(<span class="string">&#x27;select 1&#x27;</span>,<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;ERROR!&quot;</span>,err.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;res:&quot;</span>, res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/.com//1662537986379.png" alt="1662537986379"></p><p><strong>查询数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询表中所有数据</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;select * from t_mail&#x27;</span></span><br><span class="line">db.query(sqlStr,<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err.message)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>插入数据，数组形式：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入数据</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;bkpp&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;1234pp&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//？ 代表占位符</span></span><br><span class="line"><span class="keyword">const</span> insertSql = <span class="string">&#x27;insert into user(username,password) values(?,?)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用数组的形式传入数据，依次为占位符的内容</span></span><br><span class="line">db.query(insertSql,[user.username,user.password],<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err.message)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">if</span>(res.affectedRows===<span class="number">1</span>)&#123;<span class="comment">//通过affectedRows 判断是否插入成功</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;插入成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者，如果数据对象的每个属性和数据表的字段<strong>一一对应</strong>，则可以通过对象方式快速插入数据: </p><p><code>set ?</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;bkpp&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;1234pp&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> insertSql1 = <span class="string">&#x27;insert into user set ?&#x27;</span></span><br><span class="line"><span class="comment">//使用对象的形式传入数据，对象的每个属性和数据表的字段一一对应</span></span><br><span class="line">db.query(insertSql,user,<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err.message)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">if</span>(res.affectedRows===<span class="number">1</span>)&#123;<span class="comment">//通过affectedRows 判断是否插入成功</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;插入成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>更新数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update users set username=?,password=? where id=?</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用数组依次传递占位符属性</p><p>或者传入对象（所有信息一一对应表中）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update users set ? where id=?</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过res.affectedRows 判断是否更新成功</p><p><strong>删除数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;delete from user where id=?&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用数组依次传递占位符属性</p><p>通过res.affectedRows 判断是否删除成功</p><blockquote><p>删除数据一般不会真正删除用delete删除表中数据，会在表中添加一个标记是否删除的字段，通过更新标记状态执行删除。</p></blockquote><h3 id="Express中使用Session认证"><a href="#Express中使用Session认证" class="headerlink" title="Express中使用Session认证"></a>Express中使用Session认证</h3><p>安装 express-session中间件</p><p><code>npm i express-session</code></p><p>通过app.use() 注册session中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 </span></span><br><span class="line"><span class="keyword">let</span> session  = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br><span class="line"><span class="comment">//配置session</span></span><br><span class="line">app.use(</span><br><span class="line">session(&#123;</span><br><span class="line">        <span class="attr">secret</span>: <span class="string">&#x27;yqqq&#x27;</span>,<span class="comment">//任意字符串</span></span><br><span class="line">        <span class="attr">resave</span>: <span class="literal">false</span>, </span><br><span class="line">        <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置成功后，通过req.session 访问和使用session对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">req.session.user = req.body <span class="comment">//向session存储用户信息</span></span><br><span class="line">req.session.islogin = <span class="literal">true</span>  <span class="comment">//设置用户登录状态</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从session取出数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取用户姓名的接口</span></span><br><span class="line">app.get(<span class="string">&#x27;/api/username&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.session.islogin)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(&#123; <span class="attr">status</span>: <span class="number">401</span>, <span class="attr">msg</span>: <span class="string">&#x27;fail&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        <span class="attr">username</span>: req.session.user.username<span class="comment">//获取数据</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>清空session</p><p>退出登录时需要清空</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">req.session.destroy()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Express使用JWT认证"><a href="#Express使用JWT认证" class="headerlink" title="Express使用JWT认证"></a>Express使用JWT认证</h3><p>安装JWT相关包</p><p><code> npm install jsonwebtoken express-jwt</code></p><p>导入：</p><p><img src="/.com//1662542389985.png" alt="1662542389985"></p><p><img src="/.com//1662542483833.png" alt="1662542483833"></p><p><img src="/.com//1662542565693.png" alt="1662542565693"></p><p><img src="/.com//1662542737102.png" alt="1662542737102"></p><p><img src="/.com//1662542784772.png" alt="1662542784772"></p><p><img src="/.com//1662543012658.png" alt="1662543012658"></p><p><img src="/.com//1662543254170.png" alt="1662543254170"></p>]]></content>
      
      
      <categories>
          
          <category> Node基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c/c++ 判断一个字符串中包含另一个字符串</title>
      <link href="/2022/03/09/c-c-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%8C%85%E5%90%AB%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2022/03/09/c-c-%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%8C%85%E5%90%AB%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="c-类-中-find函数使用"><a href="#c-类-中-find函数使用" class="headerlink" title="c++ 类 中 find函数使用"></a>c++ <string>类 中 find函数使用</string></h2><p>在str1 中查找str2串的位置</p><h2 id="find-函数-str1-find-str2"><a href="#find-函数-str1-find-str2" class="headerlink" title="find() 函数 str1.find(str2)"></a>find() 函数 str1.find(str2)</h2><p>使用方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str1.<span class="built_in">find</span>(str2);                    <span class="comment">//  从串str1中查找时str2，返回str2中首个字符在str1中的地址</span></span><br><span class="line"></span><br><span class="line">str1.<span class="built_in">find</span>(str2,<span class="number">5</span>);                <span class="comment">//   从str1的第5个字符开始查找str2</span></span><br><span class="line"></span><br><span class="line">str1.<span class="built_in">find</span>(<span class="string">&quot;hello&quot;</span>);            <span class="comment">//   如果usage在str1中查找到，返回第一个字母“h”在str1中的位置</span></span><br><span class="line"></span><br><span class="line">str1.<span class="built_in">find</span>(<span class="string">&quot;o&quot;</span>);                     <span class="comment">//   查找字符o并返回地址</span></span><br><span class="line"></span><br><span class="line">str1.<span class="built_in">find</span>(<span class="string">&quot;of big&quot;</span>,<span class="number">2</span>,<span class="number">2</span>);      <span class="comment">//   从str1中的第二个字符开始查找of big的前两个字符</span></span><br></pre></td></tr></table></figure><p><strong>判断一个字符串是否包含另一个字符串的使用方法：</strong></p><p><code>if(str.find(“chi1 huo3 guo1”) != string :: npos)</code><br>表示str字符串<strong>包含</strong>“chi1 huo3 guo1”<br><code>if(str.find(“chi1 huo3 guo1”) == string :: npos)</code><br>表示str字符串<strong>不包含</strong>“chi1 huo3 guo1”</p><p><strong>npos 是一个常数，用来表示不存在的位置</strong><br>查找字符串a是否包含子串b,不是用strA.find(strB) &gt; 0 而是  strA.find(strB) !=  string  ::  npos</p><h2 id="find-first-of-函数"><a href="#find-first-of-函数" class="headerlink" title="find_first_of 函数"></a><code>find_first_of</code> 函数</h2><p><code>find_first_of</code> 函数最容易出错的地方是和find函数搞混。它最大的区别就是如果在一个字符串str1中查找另一个字符串str2，如果str1中含有str2中的任何字符，则就会查找成功，而find则不同；</p><p>比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">str1</span><span class="params">(<span class="string">&quot;I am change&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">str2</span><span class="params">(<span class="string">&quot;about&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k=str1.<span class="built_in">find_first_of</span>(str2);  <span class="comment">//k返回的值是about这5个字符中任何一个首次在str1中出现的位置；</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFS模板</title>
      <link href="/2022/03/07/BFS%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/03/07/BFS%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>BFS的模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">bool</span> vst[maxn][maxn]; <span class="comment">// 访问标记</span></span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;; <span class="comment">// 方向向量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">State</span> // <span class="title">BFS</span> 队列中的状态数据结构</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y; <span class="comment">// 坐标位置</span></span><br><span class="line"><span class="keyword">int</span> Step_Counter; <span class="comment">// 搜索步数统计器</span></span><br><span class="line">&#125;;</span><br><span class="line">State a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CheckState</span><span class="params">(State s)</span> <span class="comment">// 约束条件检验</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!vst[s.x][s.y] &amp;&amp; ...) <span class="comment">// 满足条件</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 约束条件冲突</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(State st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue &lt;State&gt; q; <span class="comment">// BFS 队列</span></span><br><span class="line">State now,next; <span class="comment">// 定义2 个状态，当前和下一个</span></span><br><span class="line">st.Step_Counter=<span class="number">0</span>; <span class="comment">// 计数器清零</span></span><br><span class="line">q.<span class="built_in">push</span>(st); <span class="comment">// 入队</span></span><br><span class="line">vst[st.x][st.y]=<span class="number">1</span>; <span class="comment">// 访问标记</span></span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">now=q.<span class="built_in">front</span>(); <span class="comment">// 取队首元素进行扩展</span></span><br><span class="line"><span class="keyword">if</span>(now==G) <span class="comment">// 出现目标态，此时为Step_Counter 的最小值，可以退出即可</span></span><br><span class="line">&#123;</span><br><span class="line">...... <span class="comment">// 做相关处理</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">next.x=now.x+dir[i][<span class="number">0</span>]; <span class="comment">// 按照规则生成下一个状态</span></span><br><span class="line">next.y=now.y+dir[i][<span class="number">1</span>];</span><br><span class="line">next.Step_Counter=now.Step_Counter+<span class="number">1</span>; <span class="comment">// 计数器加1</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">CheckState</span>(next)) <span class="comment">// 如果状态满足约束条件则入队</span></span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(next);</span><br><span class="line">vst[next.x][next.y]=<span class="number">1</span>; <span class="comment">//访问标记</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">pop</span>(); <span class="comment">// 队首元素出队 </span></span><br><span class="line">   &#125;</span><br><span class="line">    ?<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">......</span><br><span class="line">?<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 学习阶段（二）</title>
      <link href="/2022/03/07/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2022/03/07/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="本地存储-sessionstorage-、-localstorage"><a href="#本地存储-sessionstorage-、-localstorage" class="headerlink" title="本地存储 sessionstorage  、 localstorage"></a>本地存储 sessionstorage  、 localstorage</h3><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220307133643734.png" alt="image-20220307133643734"></p><h4 id="window-sessionstorage"><a href="#window-sessionstorage" class="headerlink" title="window.sessionstorage"></a><strong>window.sessionstorage</strong></h4><p>特点：<br>1、生命周期为关闭浏览器窗口</p><p>2、在同一窗口（页面）下数据可以共享</p><p>3、以键值对的形式存储使用</p><p><strong>存储数据</strong></p><p><code>sessionstorage.setItem(key,value);</code></p><p><strong>获取数据</strong></p><p><code>sessionstorage.getItem(key)</code></p><p><strong>删除数据</strong></p><p><code>sessionstorage.removeitem(key)</code></p><p><strong>清楚所有数据//慎用</strong></p><p><code>sessionstorage.clear()</code></p><p>window.localStorage</p><p>特点：<br>1、生命周期永久有效，除非手动删除否则关闭页面也存在</p><p>2、可以多窗口（页面）共享数据 （同一浏览器你）</p><p>3、以键值对的形式存储使用</p><p>存储数据</p><p><code>localStorage.setItem(key.value)</code></p><p><strong>获取数据</strong></p><p><code>localStorage.getItem(key)</code></p><p><strong>删除数据</strong></p><p><code>localStorage.removeitem(key)</code></p><p><strong>清楚所有数据//慎用</strong></p><p><code>localStorage.clear()</code></p><p>使用案例：记住用户</p><h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>是一个库</p><p>优点：轻量级、跨浏览器兼容、简化DOM操作、免费、开源</p><p>JQuery 入口函数</p><p><strong>$</strong> 顶级对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="jQuery对象和dom对象"><a href="#jQuery对象和dom对象" class="headerlink" title="jQuery对象和dom对象"></a><strong>jQuery对象和dom对象</strong></h3><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220307170304947.png" alt="image-20220307170304947"></p><p><strong>相互转换</strong></p><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220307170639175.png" alt="image-20220307170639175"></p><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220307171104188.png" alt="image-20220307171104188"></p><h3 id="jQuery设置样式"><a href="#jQuery设置样式" class="headerlink" title="jQuery设置样式"></a>jQuery设置样式</h3><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220307201734679.png" alt="image-20220307201734679"></p><p>隐式迭代</p><h3 id="筛选选择器"><a href="#筛选选择器" class="headerlink" title="筛选选择器"></a>筛选选择器</h3><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220307201952829.png" alt="image-20220307201952829"></p><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220307202325430.png" alt="image-20220307202325430"></p><p>排他思想，隐式迭代</p><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220307203501737.png" alt="image-20220307203501737"></p><p><strong>siblings 鼠标经过 展示相应的内容</strong></p><p>（重点是jQuery的函数使用和实现思路）</p><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220307204722559.png" alt="image-20220307204722559"></p><p>链式编程</p><h3 id="操作css"><a href="#操作css" class="headerlink" title="操作css"></a>操作css</h3><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220307205416139.png" alt="image-20220307205416139"></p><h3 id="jquery-属性操作"><a href="#jquery-属性操作" class="headerlink" title="jquery 属性操作"></a>jquery 属性操作</h3><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220309210355533.png" alt="image-20220309210355533"></p><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220309210341959.png" alt="image-20220309210341959"></p><h3 id="jquery-内容文本值"><a href="#jquery-内容文本值" class="headerlink" title="jquery 内容文本值"></a>jquery 内容文本值</h3><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220309211922690.png" alt="image-20220309211922690"></p><p>示例：<br><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220309212009880.png" alt="image-20220309212009880"></p><h3 id="jQuery遍历对象-each"><a href="#jQuery遍历对象-each" class="headerlink" title="**jQuery遍历对象 each()"></a>**jQuery遍历对象 each()</h3><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220309213655560.png" alt="image-20220309213655560"></p><p>遍历数据数组适合用下面这种写法：</p><p>$.each(arr,function(i,ele){</p><p>​    //i是索引</p><p>//ele 是数组的值</p><p>})</p><h3 id="元素操作"><a href="#元素操作" class="headerlink" title="元素操作"></a>元素操作</h3><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220309215124601.png" alt="image-20220309215124601"></p><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220309215204218.png" alt="image-20220309215204218"></p><h3 id="jQuery-尺寸、位置操作"><a href="#jQuery-尺寸、位置操作" class="headerlink" title="jQuery 尺寸、位置操作"></a>jQuery 尺寸、位置操作</h3><p>offset方法获取元素距离document的位置，position方法获取的是元素距离有定位的父元素的位置。</p><pre><code>//获取元素距离document的位置,返回值为对象：&#123;left:100, top:100&#125;$(selector).offset();//获取相对于其最近的有定位的父元素的位置。$(selector).position();</code></pre><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220312153903544.png" alt="image-20220312153903544"></p><p>p404</p><h3 id="JQuery事件"><a href="#JQuery事件" class="headerlink" title="JQuery事件"></a>JQuery事件</h3><p>事件注册</p><p>​    单个事件注册</p><p>事件处理</p><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220314130122109.png" alt="image-20220314130122109"></p><p>on可以是实现事件委托</p><p><img src="/images/JavaScript-%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220314130518403.png" alt="image-20220314130518403"></p><p>on可以给未开动态创建的元素绑定事件 </p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯赛前培训笔记</title>
      <link href="/2022/02/15/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%B5%9B%E5%89%8D%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/02/15/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%B5%9B%E5%89%8D%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="搜索法"><a href="#搜索法" class="headerlink" title="搜索法"></a>搜索法</h2><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><blockquote><p>2020国赛 美丽的2</p></blockquote><blockquote><p>门牌制作</p></blockquote><blockquote><p>既约分数</p></blockquote><blockquote><p>蛇形填数</p><p><a href="https://imgtu.com/i/H2MXsf"><img src="https://s4.ax1x.com/2022/02/15/H2MXsf.md.png" alt="H2MXsf.md.png"></a></p></blockquote><p><a href="https://imgtu.com/i/H28V39"><img src="https://s4.ax1x.com/2022/02/15/H28V39.md.png" alt="H28V39.md.png"></a></p><h3 id="枚举排列"><a href="#枚举排列" class="headerlink" title="枚举排列"></a>枚举排列</h3><p><a href="https://imgtu.com/i/HRSd39"><img src="https://s4.ax1x.com/2022/02/15/HRSd39.md.png" alt="HRSd39.md.png"></a></p><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><p><strong>三羊献瑞</strong></p><p>解题思路： </p><ul><li>枚举 （八重循环）</li><li>STL （next_permutation()）排列</li><li>DFS</li></ul><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><h3 id="启发式搜索"><a href="#启发式搜索" class="headerlink" title="启发式搜索"></a>启发式搜索</h3><h4 id="真题"><a href="#真题" class="headerlink" title="真题"></a>真题</h4><p>填空题</p><ul><li>涉及到日期天数星期</li></ul><p>​       可以用 <strong>模拟</strong> 的方法</p><p><a href="https://imgtu.com/i/H5T0Ag"><img src="https://s4.ax1x.com/2022/02/17/H5T0Ag.md.png" alt="H5T0Ag.md.png"></a></p><h2 id="刷题记录"><a href="#刷题记录" class="headerlink" title="刷题记录"></a>刷题记录</h2><h3 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h3><h4 id="付账问题"><a href="#付账问题" class="headerlink" title="付账问题"></a>付账问题</h4><p>几个人一起出去吃饭是常有的事。但在结帐的时候，常常会出现一些争执。现在有 <em>n</em>个人出去吃饭，他们总共消费了 <em>S</em> 元。其中第 <em>i</em>个人带了 <em>ai</em>元。</p><p>幸运的是，所有人带的钱的总数是足够付账的，但现在问题来了：每个人分别要出多少钱呢？</p><p>为了公平起见，我们希望在总付钱量恰好为 <em>S</em>的前提下，最后每个人付的钱的标准差最小。</p><p>这里我们约定，每个人支付的钱数可以是任意非负实数，即可以不是 1</p><p> 分钱的整数倍。</p><p>你需要输出最小的标准差是多少。</p><p>标准差的介绍：标准差是多个数与它们平均数差值的平方平均数，一般用于刻画这些数之间的“偏差有多大”。</p><p>形式化地说，设第 <em>i</em>个人付的钱为 <em>bi</em> 元，那么标准差为 : </p><p><img src="https://cdn.acwing.com/media/article/image/2019/12/04/19_6734517a16-p1.png" alt="https://cdn.acwing.com/media/article/image/2019/12/04/19_6734517a16-p1.png"></p><p><strong>输入格式</strong></p><p>第一行包含两个整数 <em>n</em>、<em>S</em>；</p><p>第二行包含 <em>n</em>个非负整数 <em>a</em>1, …, <em>a**n</em>。</p><p><strong>输出格式</strong></p><p>输出最小的标准差，四舍五入保留 4位小数。</p><p><strong>数据范围</strong></p><p>1≤<em>n</em>≤5×105<br>0≤<em>ai</em>≤109,<br>0≤<em>S</em>≤1015</p><p><strong>输入样例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 2333</span><br><span class="line">666 666 666 666 666</span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.0000</span><br></pre></td></tr></table></figure><p><strong>输入样例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 30</span><br><span class="line">2 1 4 7 4 8 3 6 4 7</span><br></pre></td></tr></table></figure><p><strong>输出样例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.7928</span><br></pre></td></tr></table></figure><p><strong>思路：</strong></p><p>想求方差最小，根据公式可以理解，当每个人支付的<strong>金额接近平均值</strong>时，方差才能最小；<br>首先计算平均值avg=s/n,对数据从小到大排序；<br>每个人现有的钱为a[i]<br>会出现两种情况：<br>1.a[i]&gt;=avg 那么直接支付所有钱即可<br>2.a[i]&lt;avg  那此人差的钱avg-a[i] 将由剩下的人平摊，平摊后会使剩下的人支付的金额均值增大，且平摊过程中有可能存在某个人钱又低于这个平均值<br>那又交个剩下的人平摊差值，直到支付完成。</p><blockquote><p>注： 测试数据需要 long double 才能过</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> n,s;</span><br><span class="line"><span class="keyword">int</span> a[N];<span class="comment">//每个人身上的钱</span></span><br><span class="line"><span class="keyword">double</span> pay[N];<span class="comment">//记录每个人需要支付的钱</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a,a+n);<span class="comment">//排序</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> avg = s*<span class="number">1.0</span>/n;<span class="comment">//计算均值</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> cur_avg = avg;<span class="comment">//当前均值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;=cur_avg)</span><br><span class="line">&#123;</span><br><span class="line">pay[i] += cur_avg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">s-=a[i];<span class="comment">//更新剩余需要支付总额 </span></span><br><span class="line">pay[i] = a[i];<span class="comment">//钱不够就全部支付 </span></span><br><span class="line">cur_avg = s*<span class="number">1.0</span>/(n-i<span class="number">-1</span>);<span class="comment">//剩下所需支付的平均值 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求方差 </span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> sum=<span class="number">0</span>;<span class="comment">//测试数据需要 long double 才能过</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">sum+=(pay[i]-avg)*(pay[i]-avg);</span><br><span class="line">&#125;</span><br><span class="line">sum = <span class="built_in">sqrt</span>(sum/n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.4Lf&quot;</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h4><p><strong>题目描述：</strong></p><p>给定 N 个加号、M 个减号以及 N+M+1 个整数 A1,A2,⋅⋅⋅,AN+M+1，小明想知道在所有由这 N 个加号、M 个减号以及 N+M+1 个整数凑出的合法的后缀表达式中，结果最大的是哪一个？</p><p>请你输出这个最大的结果。</p><p>例如使用 123+−，则 “23+1−” 这个后缀表达式结果是 4，是最大的。</p><p><strong>输入格式</strong></p><p>第一行包含两个整数 N 和 M。</p><p>第二行包含 N+M+1 个整数 A1,A2,⋅⋅⋅,AN+M+1。</p><p><strong>输出格式</strong></p><p>输出一个整数，代表答案。</p><p><strong>数据范围</strong></p><p>0≤N,M≤10E5,<br>−109≤Ai≤10E9</p><p>思路：<br>特殊情况：m=0时，直接将所有数相加；</p><p>当m≠0时，将数据排序，取出最大和最小值</p><p>相减： a[max]-a[min]</p><p>加个括号： a[max]-（a[min]）</p><p>对于再加的任意一个数，可以加在括号内或括号外，为了保证值最大，加上正数，减去负数，即只要加上最大值减最下值，中间的数都有可能构造为正数，所以只需要加上中间数的绝对值即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">LL a[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+m+<span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a,a+n+m+<span class="number">1</span>);</span><br><span class="line">LL res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+m+<span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">res+=a[i];</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">res = a[n+m]-a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n+m;i++)</span><br><span class="line">&#123;</span><br><span class="line">res+=<span class="built_in">abs</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BFS-1"><a href="#BFS-1" class="headerlink" title="BFS"></a>BFS</h3><h4 id="献给阿尔吉侬的花束"><a href="#献给阿尔吉侬的花束" class="headerlink" title="献给阿尔吉侬的花束"></a>献给阿尔吉侬的花束</h4><p>阿尔吉侬是一只聪明又慵懒的小白鼠，它最擅长的就是走各种各样的迷宫。</p><p>今天它要挑战一个非常大的迷宫，研究员们为了鼓励阿尔吉侬尽快到达终点，就在终点放了一块阿尔吉侬最喜欢的奶酪。</p><p>现在研究员们想知道，如果阿尔吉侬足够聪明，它最少需要多少时间就能吃到奶酪。</p><p>迷宫用一个 <em>R</em>×<em>C</em>的字符矩阵来表示。</p><p>字符 S 表示阿尔吉侬所在的位置，字符 E 表示奶酪所在的位置，字符 # 表示墙壁，字符 . 表示可以通行。</p><p>阿尔吉侬在 1 个单位时间内可以从当前的位置走到它上下左右四个方向上的任意一个位置，但不能走出地图边界。</p><p><strong>输入格式</strong></p><p>第一行是一个正整数 <em>T</em>，表示一共有 <em>T</em>组数据。</p><p>每一组数据的第一行包含了两个用空格分开的正整数 <em>R</em> 和 <em>C</em>，表示地图是一个 <em>R</em>×<em>C</em>的矩阵。</p><p>接下来的 <em>R</em>行描述了地图的具体内容，每一行包含了 <em>C</em>个字符。字符含义如题目描述中所述。保证有且仅有一个 S 和 E。</p><p><strong>输出格式</strong></p><p>对于每一组数据，输出阿尔吉侬吃到奶酪的最少单位时间。</p><p>若阿尔吉侬无法吃到奶酪，则输出“oop!”（只输出引号里面的内容，不输出引号）。</p><p>每组数据的输出结果占一行。</p><p><strong>数据范围</strong></p><p>1&lt;<em>T</em>≤10,<br>2≤<em>R</em>,<em>C</em>≤200</p><p><strong>输入样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3 4</span><br><span class="line">.S..</span><br><span class="line">###.</span><br><span class="line">..E.</span><br><span class="line">3 4</span><br><span class="line">.S..</span><br><span class="line">.E..</span><br><span class="line">....</span><br><span class="line">3 4</span><br><span class="line">.S..</span><br><span class="line">####</span><br><span class="line">..E.</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1</span><br><span class="line">oop!</span><br></pre></td></tr></table></figure><p>思路：</p><p>BFS，</p><p><strong>BFS的模板：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">BFS:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">bool</span> vst[maxn][maxn]; <span class="comment">// 访问标记</span></span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;; <span class="comment">// 方向向量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">State</span> // <span class="title">BFS</span> 队列中的状态数据结构</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y; <span class="comment">// 坐标位置</span></span><br><span class="line"><span class="keyword">int</span> Step_Counter; <span class="comment">// 搜索步数统计器</span></span><br><span class="line">&#125;;</span><br><span class="line">State a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CheckState</span><span class="params">(State s)</span> <span class="comment">// 约束条件检验</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!vst[s.x][s.y] &amp;&amp; ...) <span class="comment">// 满足条件</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 约束条件冲突</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(State st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue &lt;State&gt; q; <span class="comment">// BFS 队列</span></span><br><span class="line">State now,next; <span class="comment">// 定义2 个状态，当前和下一个</span></span><br><span class="line">st.Step_Counter=<span class="number">0</span>; <span class="comment">// 计数器清零</span></span><br><span class="line">q.<span class="built_in">push</span>(st); <span class="comment">// 入队</span></span><br><span class="line">vst[st.x][st.y]=<span class="number">1</span>; <span class="comment">// 访问标记</span></span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">now=q.<span class="built_in">front</span>(); <span class="comment">// 取队首元素进行扩展</span></span><br><span class="line"><span class="keyword">if</span>(now==G) <span class="comment">// 出现目标态，此时为Step_Counter 的最小值，可以退出即可</span></span><br><span class="line">&#123;</span><br><span class="line">...... <span class="comment">// 做相关处理</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">next.x=now.x+dir[i][<span class="number">0</span>]; <span class="comment">// 按照规则生成下一个状态</span></span><br><span class="line">next.y=now.y+dir[i][<span class="number">1</span>];</span><br><span class="line">next.Step_Counter=now.Step_Counter+<span class="number">1</span>; <span class="comment">// 计数器加1</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">CheckState</span>(next)) <span class="comment">// 如果状态满足约束条件则入队</span></span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(next);</span><br><span class="line">vst[next.x][next.y]=<span class="number">1</span>; <span class="comment">//访问标记</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">pop</span>(); <span class="comment">// 队首元素出队 </span></span><br><span class="line">   &#125;</span><br><span class="line">    ?<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">......</span><br><span class="line">?<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>本题要求从起点走到终点的最短距离。</p><p>从起点出发，广度优先遍历地图</p><p>首先，起点入队列。</p><p>若队列非空，则一直执行以下步骤：<br>1.队头出队。</p><p>2.遍历队头的上下左右四个方向，将符合条件约束的坐标入队列，并更新该点对应的dis（距离值）为队头的dis+1</p><p>3.如果是 ‘#’、越界，遍历过的情况，不做处理</p><p>题解代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">210</span>;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">int</span> r,c;</span><br><span class="line"><span class="keyword">char</span> g[N][N];</span><br><span class="line"><span class="keyword">int</span> dis[N][N];<span class="comment">//距离和判重合二为一 </span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;<span class="comment">//四个方向的偏移量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(PII start, PII end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="keyword">sizeof</span> dis);  <span class="comment">// 把距离数组都初始化成-1，方便判断是否标记过 </span></span><br><span class="line">dis[start.x][start.y] = <span class="number">0</span>;  <span class="comment">// 起点开始，距离为0</span></span><br><span class="line"></span><br><span class="line">queue&lt;PII&gt; q;<span class="comment">//定义队列 ，类型时pair </span></span><br><span class="line">q.<span class="built_in">push</span>(start);<span class="comment">//队头 </span></span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">PII t = q.<span class="built_in">front</span>();<span class="comment">//取队首元素进行扩展 </span></span><br><span class="line">q.<span class="built_in">pop</span>(); <span class="comment">// 队首元素出队 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//四个方向遍历 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = t.first+dx[i];</span><br><span class="line"><span class="keyword">int</span> y = t.second+dy[i];</span><br><span class="line"><span class="comment">//如果状态满足约束条件则入队 </span></span><br><span class="line"><span class="keyword">if</span>(g[x][y]==<span class="string">&#x27;#&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= r || y &lt; <span class="number">0</span> || y &gt;= c) <span class="keyword">continue</span>;  <span class="comment">// 出界，跳出本次循环</span></span><br><span class="line">            <span class="keyword">if</span> (dis[x][y] != <span class="number">-1</span>) <span class="keyword">continue</span>;    <span class="comment">// 标记过了，跳出本次循环</span></span><br><span class="line"></span><br><span class="line">dis[x][y] = dis[t.first][t.second]+<span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(&#123;x,y&#125;);</span><br><span class="line"><span class="comment">//判断到终点没 </span></span><br><span class="line"><span class="keyword">if</span> (end == <span class="built_in">make_pair</span>(x, y)) <span class="keyword">return</span> dis[x][y];  <span class="comment">// 走到终点了，返回距离</span></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;r&gt;&gt;c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,g[i]);</span><br><span class="line">PII start,end;</span><br><span class="line"><span class="comment">//遍历一遍找到起点和终点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;c;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(g[i][j]==<span class="string">&#x27;S&#x27;</span>) start = &#123;i,j&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(g[i][j]==<span class="string">&#x27;E&#x27;</span>) end = &#123;i,j&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> dist = <span class="built_in">bfs</span>(start,end);</span><br><span class="line"><span class="keyword">if</span>(dist==<span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">&quot;oop!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;dist&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><em><strong>本题知识点总结：</strong></em></p><ul><li>定义<strong>pair</strong> 可以和<strong>结构体</strong>一样的效果</li></ul><p>​       定义方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span> <span class="keyword">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">PII p;</span><br><span class="line">p.x=<span class="number">0</span>;</span><br><span class="line">p.y=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列</span></span><br><span class="line">queue&lt;PII&gt; q;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>图的遍历四个方向时：<br>定义偏移量，循环遍历就可以</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;<span class="comment">//四个方向的偏移量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x = t.first+dx[i];</span><br><span class="line">    <span class="keyword">int</span> y = t.second+dy[i];</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="红与黑"><a href="#红与黑" class="headerlink" title="红与黑"></a>红与黑</h4><p>有一间长方形的房子，地上铺了红色、黑色两种颜色的正方形瓷砖。</p><p>你站在其中一块黑色的瓷砖上，只能向相邻（上下左右四个方向）的黑色瓷砖移动。</p><p>请写一个程序，计算你总共能够到达多少块黑色的瓷砖。</p><p><strong>输入格式</strong></p><p>输入包括多个数据集合。</p><p>每个数据集合的第一行是两个整数 <em>W</em>和 <em>H</em>，分别表示 <em>x</em> 方向和 <em>y</em> 方向瓷砖的数量。</p><p>在接下来的 <em>H</em>行中，每行包括 <em>W</em> 个字符。每个字符表示一块瓷砖的颜色，规则如下</p><p>1）‘.’：黑色的瓷砖；<br> 2）‘#’：红色的瓷砖；<br> 3）‘@’：黑色的瓷砖，并且你站在这块瓷砖上。该字符在每个数据集合中唯一出现一次。</p><p>当在一行中读入的是两个零时，表示输入结束。</p><p><strong>输出格式</strong></p><p>对每个数据集合，分别输出一行，显示你从初始位置出发能到达的瓷砖数(记数时包括初始位置的瓷砖)。</p><p><strong>数据范围</strong></p><p>1≤<em>W</em>,<em>H</em>≤20</p><p><strong>输入样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">6 9 </span><br><span class="line">....#. </span><br><span class="line">.....# </span><br><span class="line">...... </span><br><span class="line">...... </span><br><span class="line">...... </span><br><span class="line">...... </span><br><span class="line">...... </span><br><span class="line">#@...# </span><br><span class="line">.#..#. </span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">45</span><br></pre></td></tr></table></figure><p>思路：<br>BFS 广度优先搜索</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">21</span>;</span><br><span class="line"><span class="keyword">int</span> w,h;</span><br><span class="line"><span class="keyword">char</span> g[N][N]; </span><br><span class="line"><span class="keyword">int</span> vis[N][N];<span class="comment">//访问标记</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(PII start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">-1</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));<span class="comment">//</span></span><br><span class="line">queue&lt;PII&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(start);</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">PII t =q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = t.first+dx[i];</span><br><span class="line"><span class="keyword">int</span> y = t.second+dy[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(g[x][y]!=<span class="string">&#x27;.&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;=h||y&lt;<span class="number">0</span>||y&gt;=w) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(vis[x][y]!=<span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">vis[x][y] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//res = res &gt; vis[x][y] ? res : vis[x][y] ;</span></span><br><span class="line">q.<span class="built_in">push</span>(&#123;x,y&#125;);</span><br><span class="line">res++;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;w,&amp;h)&amp;&amp;h&amp;&amp;w)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,g[i]);</span><br><span class="line">PII start;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;w;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(g[i][j]==<span class="string">&#x27;@&#x27;</span>) </span><br><span class="line">&#123;</span><br><span class="line">start=&#123;i,j&#125;;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxlen=<span class="built_in">bfs</span>(start);</span><br><span class="line">cout&lt;&lt;maxlen&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="地牢大师"><a href="#地牢大师" class="headerlink" title="地牢大师"></a>地牢大师</h4><p>你现在被困在一个三维地牢中，需要找到最快脱离的出路！ </p><p>地牢由若干个单位立方体组成，其中部分不含岩石障碍可以直接通过，部分包含岩石障碍无法通过。 </p><p>向北，向南，向东，向西，向上或向下移动一个单元距离均需要一分钟。 </p><p>你不能沿对角线移动，迷宫边界都是坚硬的岩石，你不能走出边界范围。</p><p>请问，你有可能逃脱吗？ </p><p>如果可以，需要多长时间？</p><p><strong>输入格式</strong></p><p>输入包含多组测试数据。</p><p>每组数据第一行包含三个整数 <em>L</em>,<em>R</em>,<em>C</em>分别表示地牢层数，以及每一层地牢的行数和列数。</p><p>接下来是 <em>L</em>个 <em>R</em> 行 <em>C</em>列的字符矩阵，用来表示每一层地牢的具体状况。</p><p>每个字符用来描述一个地牢单元的具体状况。</p><p>其中, 充满岩石障碍的单元格用”#”表示，不含障碍的空单元格用”.”表示，你的起始位置用”S”表示，终点用”E”表示。</p><p>每一个字符矩阵后面都会包含一个空行。</p><p>当输入一行为”0 0 0”时，表示输入终止。</p><p><strong>输出格式</strong></p><p>每组数据输出一个结果，每个结果占一行。</p><p>如果能够逃脱地牢，则输出”Escaped in x minute(s).”，其中X为逃脱所需最短时间。</p><p>如果不能逃脱地牢，则输出”Trapped!”。</p><p><strong>数据范围</strong></p><p>1≤<em>L</em>,<em>R</em>,<em>C</em>≤100</p><p><strong>输入样例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">3 4 5</span><br><span class="line">S....</span><br><span class="line">.###.</span><br><span class="line">.##..</span><br><span class="line">###.#</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">##.##</span><br><span class="line">##...</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">#.###</span><br><span class="line">####E</span><br><span class="line"></span><br><span class="line">1 3 3</span><br><span class="line">S##</span><br><span class="line">#E#</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">0 0 0</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Escaped in 11 minute(s).</span><br><span class="line">Trapped!</span><br></pre></td></tr></table></figure><p>bfs</p><p>这道题做着一直超时 ..后面终于在看大佬题解的时候改对了 感觉好像是队列重复入队导致的超时，主要是符合条件入队列的情况写的不准确</p><p>这道题是三维的 但是大致的bfs框架还是差不多<br>主要的区别是 和三维字符数组的读入</p><p>偏移量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//偏移量</span><br><span class="line">int dx[6]=&#123;1,0,-1,0,0,0&#125;;</span><br><span class="line">int dy[6]=&#123;0,1,0,-1,0,0&#125;;</span><br><span class="line">int dz[6]=&#123;0,0,0,0,-1,1&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="keyword">int</span> l,r,c;</span><br><span class="line"><span class="keyword">char</span> g[N][N][N];</span><br><span class="line"><span class="keyword">int</span> dis[N][N][N];<span class="comment">//计算步数 </span></span><br><span class="line"><span class="comment">//偏移量</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">6</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dz[<span class="number">6</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> z, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (z &lt; <span class="number">0</span> || z &gt;= l) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= r) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (y &lt; <span class="number">0</span> || y &gt;= c) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (dis[z][x][y] != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (g[z][x][y] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(node start,node end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">-1</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">dis[start.x][start.y][start.z]=<span class="number">0</span>;<span class="comment">//起点 </span></span><br><span class="line">queue&lt;node&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(start);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> xx = t.x+dx[i];</span><br><span class="line"><span class="keyword">int</span> yy = t.y+dy[i];</span><br><span class="line"><span class="keyword">int</span> zz = t.z+dz[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">//符合条件入队列</span></span><br><span class="line"><span class="comment">//if(g[xx][yy][zz]==&#x27;#&#x27;) continue;</span></span><br><span class="line"><span class="comment">//if(xx&lt;0 || xx&gt;=l || yy&lt;0 || yy&gt;=r || zz&lt;0|| zz&gt;=c) continue;</span></span><br><span class="line"><span class="comment">//if(dis[xx][yy][zz]!=-1) continue;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(xx,yy,zz)) </span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(&#123;xx,yy,zz&#125;);</span><br><span class="line">dis[xx][yy][zz] = dis[t.x][t.y][t.z]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(xx==end.x&amp;&amp;yy==end.y&amp;zz==end.z) <span class="keyword">return</span> dis[end.x][end.y][end.z];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;c)&amp;&amp;l)</span><br><span class="line">&#123;</span><br><span class="line">node start,end;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;r;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,g[i][j]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;c;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(g[i][j][k]==<span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">start.x=i;</span><br><span class="line">start.y=j;</span><br><span class="line">start.z=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(g[i][j][k]==<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">end.x=i;</span><br><span class="line">end.y=j;</span><br><span class="line">end.z=k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> distance = <span class="built_in">bfs</span>(start,end);</span><br><span class="line"><span class="keyword">if</span>(distance==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Trapped!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Escaped in %d minute(s).\n&quot;</span>,distance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="全球变暖"><a href="#全球变暖" class="headerlink" title="全球变暖"></a>全球变暖</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> g[N][N]; </span><br><span class="line"><span class="keyword">int</span> vis[N][N];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(node start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = start.x+dx[i];</span><br><span class="line"><span class="keyword">int</span> y = start.y+dy[i];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(g[x][y]!=<span class="string">&#x27;#&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(node start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> total=<span class="number">0</span>,bound=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(g[start.x][start.y]==<span class="string">&#x27;#&#x27;</span>&amp;&amp;vis[start.x][start.y]==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    queue&lt;node&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(start);</span><br><span class="line">vis[start.x][start.y]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">node t = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">total++;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(t)) bound++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> xx = t.x+dx[i];</span><br><span class="line"><span class="keyword">int</span> yy = t.y+dy[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(g[xx][yy]==<span class="string">&#x27;#&#x27;</span>&amp;&amp;vis[xx][yy]==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">vis[xx][yy]=<span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(&#123;xx,yy&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(total==bound&amp;&amp;total) res++; <span class="comment">//// 当前的块中所有的格子==周围有海洋的数量, 就会被淹没</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,g[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">-1</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">node start;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(g[i][j]==<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">bfs</span>(&#123;i,j&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="大臣的旅费-（树的直径）-最远距离"><a href="#大臣的旅费-（树的直径）-最远距离" class="headerlink" title="大臣的旅费 （树的直径） 最远距离"></a>大臣的旅费 （树的直径） 最远距离</h4><p>使用dfs </p><p>用vector存储图</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> dis[N];<span class="comment">//距离 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>//结构体存储边 </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> id,w;<span class="comment">//边的编号、长度（权重） </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;Edge&gt; h[N];<span class="comment">//每个点存vector </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f,<span class="keyword">int</span> distance)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dis[u] = distance;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> node : h[u])</span><br><span class="line">        <span class="keyword">if</span> (node.id != f)</span><br><span class="line">            <span class="built_in">dfs</span>(node.id, u, distance + node.w);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> p,q,d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;p&gt;&gt;q&gt;&gt;d;</span><br><span class="line">h[p].<span class="built_in">push_back</span>(&#123;q,d&#125;);</span><br><span class="line">h[q].<span class="built_in">push_back</span>(&#123;p,d&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> u=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[i]&gt;dis[u])</span><br><span class="line"> u=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(u,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (dis[i] &gt; dis[u])</span><br><span class="line">            u = i;</span><br><span class="line">    <span class="keyword">int</span> s = dis[u];</span><br><span class="line">cout&lt;&lt;s * <span class="number">10</span> + s * (s + <span class="number">1ll</span>) / <span class="number">2</span>&lt;&lt;endl; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>用数组模拟邻接表存储图</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>, M = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> h[N], e[M], w[M], ne[M], idx;</span><br><span class="line"><span class="keyword">int</span> dist[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> father, <span class="keyword">int</span> distance)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dist[u] = distance;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[u]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (j != father)</span><br><span class="line">            <span class="built_in">dfs</span>(j, u, distance + w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="built_in">add</span>(a, b, c), <span class="built_in">add</span>(b, a, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (dist[u] &lt; dist[i])</span><br><span class="line">            u = i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(u, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (dist[u] &lt; dist[i])</span><br><span class="line">            u = i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, dist[u] * <span class="number">10</span> + (dist[u] + <span class="number">1ll</span>) * dist[u] / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：yxc</span><br><span class="line">链接：https:<span class="comment">//www.acwing.com/activity/content/code/content/178927/</span></span><br><span class="line">来源：AcWing</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p>刷一些dfs dp 栈 队列、图的遍历 的题和一些简单的算法 题 </p>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯第九届省赛刷题记录</title>
      <link href="/2022/02/02/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AC%AC%E4%B9%9D%E5%B1%8A%E7%9C%81%E8%B5%9B%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/02/02/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AC%AC%E4%B9%9D%E5%B1%8A%E7%9C%81%E8%B5%9B%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="明码"><a href="#明码" class="headerlink" title="明码"></a>明码</h2><p>题目：</p><p>汉字的字形存在于字库中，即便在今天，16点阵的字库也仍然使用广泛。<br>16点阵的字库把每个汉字看成是16x16个像素信息。并把这些信息记录在字节中。</p><p>一个字节可以存储8位信息，用32个字节就可以存一个汉字的字形了。<br>把每个字节转为2进制表示，1表示墨迹，0表示底色。每行2个字节，<br>一共16行，布局是：</p><p>第1字节，第2字节<br>第3字节，第4字节<br>…<br>第31字节, 第32字节</p><p>这道题目是给你一段多个汉字组成的信息，每个汉字用32个字节表示，这里给出了字节作为有符号整数的值。</p><p>题目的要求隐藏在这些信息中。你的任务是复原这些汉字的字形，从中看出题目的要求，并根据要求填写答案。</p><p>这段信息是（一共10个汉字）：<br>4 0 4 0 4 0 4 32 -1 -16 4 32 4 32 4 32 4 32 4 32 8 32 8 32 16 34 16 34 32 30 -64 0<br>16 64 16 64 34 68 127 126 66 -124 67 4 66 4 66 -124 126 100 66 36 66 4 66 4 66 4 126 4 66 40 0 16<br>4 0 4 0 4 0 4 32 -1 -16 4 32 4 32 4 32 4 32 4 32 8 32 8 32 16 34 16 34 32 30 -64 0<br>0 -128 64 -128 48 -128 17 8 1 -4 2 8 8 80 16 64 32 64 -32 64 32 -96 32 -96 33 16 34 8 36 14 40 4<br>4 0 3 0 1 0 0 4 -1 -2 4 0 4 16 7 -8 4 16 4 16 4 16 8 16 8 16 16 16 32 -96 64 64<br>16 64 20 72 62 -4 73 32 5 16 1 0 63 -8 1 0 -1 -2 0 64 0 80 63 -8 8 64 4 64 1 64 0 -128<br>0 16 63 -8 1 0 1 0 1 0 1 4 -1 -2 1 0 1 0 1 0 1 0 1 0 1 0 1 0 5 0 2 0<br>2 0 2 0 7 -16 8 32 24 64 37 -128 2 -128 12 -128 113 -4 2 8 12 16 18 32 33 -64 1 0 14 0 112 0<br>1 0 1 0 1 0 9 32 9 16 17 12 17 4 33 16 65 16 1 32 1 64 0 -128 1 0 2 0 12 0 112 0<br>0 0 0 0 7 -16 24 24 48 12 56 12 0 56 0 -32 0 -64 0 -128 0 0 0 0 1 -128 3 -64 1 -128 0 0</p><p>注意：需要提交的是一个整数，不要填写任何多余内容。</p><p><strong>思路：</strong></p><p>1、按要求实现二进制转化得题意</p><p>2、每一行代表一个汉字，每个汉字由16×16的像素组成 ，每个字节存8位二进制，也就是说，两个字节代表一行，每一行的每两位数字的二进制表示为一组；</p><p>3、将每行数字两个两个转化为二进制 在根据“1表示墨迹，0表示底色”打印 ，可得题意</p><p><strong>知识点：</strong> <em>C++的 <code>bitset</code> 在 bitset 头文件中，它是一种类似数组的结构，它的每一个元素只能是０或１，每个元素仅用１bit空间。</em></p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;<span class="comment">//每行两个字节 每次读两个数</span></span><br><span class="line">string str1,str2;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line"><span class="function">bitset&lt;8&gt; <span class="title">b</span><span class="params">(n)</span></span>;<span class="comment">//长度为８二进制保存，前面用０补充</span></span><br><span class="line">str1 = b.<span class="built_in">to_string</span>();<span class="comment">//转换为字符串 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str1.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(str1[i]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;*&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">bitset&lt;8&gt; <span class="title">c</span><span class="params">(m)</span></span>;</span><br><span class="line">str2 = c.<span class="built_in">to_string</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str2.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(str2[i]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;*&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目打印出来为：</p><p><a href="https://imgtu.com/i/HEVe39"><img src="https://s4.ax1x.com/2022/02/02/HEVe39.md.png" alt="HEVe39.md.png"></a></p><p>计算9的9次方</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n=<span class="built_in">pow</span>(<span class="number">9</span>,<span class="number">9</span>) ;</span><br><span class="line">  cout&lt;&lt;n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乘积尾0"><a href="#乘积尾0" class="headerlink" title="乘积尾0"></a>乘积尾0</h2><p><strong>题目：</strong></p><p>如下的10行数据，每行有10个整数，请你求出它们的乘积的末尾有多少个零？</p><p>5650 4542 3554 473 946 4114 3871 9073 90 4329<br>2758 7949 6113 5659 5245 7432 3051 4434 6704 3594<br>9937 1173 6866 3397 4759 7557 3070 2287 1453 9899<br>1486 5722 3135 1170 4014 5510 5120 729 2880 9019<br>2049 698 4582 4346 4427 646 9742 7340 1230 7683<br>5693 7015 6887 7381 4172 4341 2909 2027 7355 5649<br>6701 6645 1671 5978 2704 9926 295 3125 3878 6785<br>2066 4247 4800 1578 6652 4616 1113 6205 3264 2915<br>3966 5291 2904 1285 2193 1428 2265 8730 9436 7074<br>689 5510 8243 6114 337 4096 8199 7313 3685 211</p><p>注意：需要提交的是一个整数，表示末尾零的个数。不要填写任何多余内容。</p><p><strong>思路：</strong></p><p>数学题，求多个数的乘积末尾有几个0，就看它的因数中有多少对2*5；</p><p><code>结论：对每个数因式分解，将所有的因子做质分解，统计所有质因子中2和5的数量，两者小者为尾数0的数量。</code></p><p>解释：</p><p>180 = 2×2×5×3×3<br>而3的n次方不会在末尾产生0，一个2和5的乘积会在末尾产生一个0，n个2乘5的积可以产生n个0，<br>再看其他的质因数7、11….仅有2和5的组合会产生0，且0的个数是2和5中个数较小值。<br>3.假设有n个180，即180n = (2×2×3×5×3)×n，2出现了2n次，3出现了2n次，5出现了n次，那么积数末尾零的个数等于2与5个数中较小值n，故该积数末尾零的个数为n。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> cnt2,cnt5;<span class="comment">//计算因子2和5的个数 </span></span><br><span class="line">&#125; node; </span><br><span class="line"></span><br><span class="line"><span class="comment">//计算</span></span><br><span class="line"><span class="function">node <span class="title">Count</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">node temp = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">temp.cnt2++;</span><br><span class="line">n/=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(n%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line">temp.cnt5++;</span><br><span class="line">n/=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> t2=<span class="number">0</span>,t5=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">t2+=<span class="built_in">Count</span>(n).cnt2;</span><br><span class="line">t5+=<span class="built_in">Count</span>(n).cnt5;</span><br><span class="line">&#125;</span><br><span class="line">res = t2 &lt; t5 ? t2 : t5; </span><br><span class="line">cout&lt;&lt;res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><h2 id="测试次数"><a href="#测试次数" class="headerlink" title="测试次数"></a>测试次数</h2><p><strong>题目：</strong></p><p>x星球的居民脾气不太好，但好在他们生气的时候唯一的异常举动是：摔手机。<br>各大厂商也就纷纷推出各种耐摔型手机。x星球的质监局规定了手机必须经过耐摔测试，并且评定出一个耐摔指数来，之后才允许上市流通。</p><p>x星球有很多高耸入云的高塔，刚好可以用来做耐摔测试。塔的每一层高度都是一样的，与地球上稍有不同的是，他们的第一层不是地面，而是相当于我们的2楼。</p><p>如果手机从第7层扔下去没摔坏，但第8层摔坏了，则手机耐摔指数=7。<br>特别地，如果手机从第1层扔下去就坏了，则耐摔指数=0。<br>如果到了塔的最高层第n层扔没摔坏，则耐摔指数=n</p><p>为了减少测试次数，从每个厂家抽样3部手机参加测试。</p><p>某次测试的塔高为1000层，如果我们总是采用最佳策略，在最坏的运气下最多需要测试多少次才能确定手机的耐摔指数呢？</p><p>请填写这个最多测试次数。</p><p>注意：需要填写的是一个整数，不要填写任何多余内容。</p><p><strong>思路1 手算：</strong></p><p>1、首先想到最佳策略是二分法2，三部手机，在0-1000内使用二分法，要考虑 手机会摔坏的情况</p><p>2、 0    500   1000  三次测试 运气最坏的情况是只有1部手机摔坏，剩下2部手机测试500-1000 的情况</p><p>3、最坏的情况就是二分法测试，直到最后的情况才有手机摔坏，</p><p>​    501   750</p><p>​    751   875</p><p>​    876   937</p><p>​    938   969</p><p>​     …….</p><p>​     998   999</p><p>一共需要测试 2 ×8=16次 </p><p>加上最开始测试的3次，一共需要16+3=19次。</p><p>（这题数字小，手算）</p><p><strong>思路2: 动态规划</strong> 好复杂 不会 学习动态规划 再来理解吧…</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><strong>题目：</strong></p><p>以下代码可以从数组a[]中找出第k小的元素。</p><p>它使用了类似快速排序中的分治算法，期望时间复杂度是O(N)的。</p><p>请仔细阅读分析源码，填写划线部分缺失的内容。</p><p>#include &lt;stdio.h&gt;</p><p>int quick_select(int a[], int l, int r, int k) {</p><p>int p = rand() % (r - l + 1) + l;</p><p>int x = a[p];</p><p>{int t = a[p]; a[p] = a[r]; a[r] = t;}</p><p>int i = l, j = r;</p><p>while(i &lt; j) {</p><p>while(i &lt; j &amp;&amp; a[i] &lt; x) i++;</p><p>if(i &lt; j) {</p><p>a[j] = a[i];</p><p>j–;</p><p>}</p><p>while(i &lt; j &amp;&amp; a[j] &gt; x) j–;</p><p>if(i &lt; j) {</p><p>a[i] = a[j];</p><p>i++;</p><p>}</p><p>}</p><p>a[i] = x;</p><p>p = i;</p><p>if(i - l + 1 == k) return a[i];</p><p>if(i - l + 1 &lt; k) return quick_select( _____________________________ ); //填空</p><p>else return quick_select(a, l, i - 1, k);</p><p>}</p><p>int main()</p><p>{</p><p>int a[] = {1, 4, 2, 8, 5, 7, 23, 58, 16, 27, 55, 13, 26, 24, 12};</p><p>printf(“%d\n”, quick_select(a, 0, 14, 5));</p><p>return 0;</p><p>}</p><p><strong>答案：</strong></p><p>quickSelect(a, i + 1, r, k - i + l - 1); </p><h2 id="递增三元组"><a href="#递增三元组" class="headerlink" title="递增三元组"></a>递增三元组</h2><p><strong>题目：</strong></p><p>给定三个整数数组<br>A = [A1, A2, … AN],<br>B = [B1, B2, … BN],<br>C = [C1, C2, … CN]，<br>请你统计有多少个三元组(i, j, k) 满足：</p><ol><li><p>1 &lt;= i, j, k &lt;= N</p></li><li><p>Ai &lt; Bj &lt; Ck</p></li></ol><p>输入：</p><p>第一行包含一个整数N<em>N</em>。 第二行包含N<em>N</em>个整数A_1,A_2,…,A_N<em>A</em>1,<em>A</em>2,…,<em>A**N</em>。 第三行包含N<em>N</em>个整数B_1,B_2,…,B_N<em>B</em>1,<em>B</em>2,…,<em>B**N</em>。 第四行包含N<em>N</em>个整数C_1,C_2,…,C_N<em>C</em>1,<em>C</em>2,…,<em>C**N</em>。</p><p>输出：</p><p>一个整数表示答案</p><p>样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">3</span><br><span class="line">1 1 1</span><br><span class="line">2 2 2</span><br><span class="line">3 3 3</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">27</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> A[N],B[N],C[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;A[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;B[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;C[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i]&lt;B[j]&lt;C[k]) cnt++;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;cnt;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="螺旋线"><a href="#螺旋线" class="headerlink" title="螺旋线"></a>螺旋线</h2><p><strong>题目</strong></p><p>如图所示的螺旋折线经过平面上所有整点恰好一次。</p><p>对于整点(X, Y)(<em>X</em>,<em>Y</em>)，我们定义它到原点的距离dis(X, Y)<em>d<strong>i</strong>s</em>(<em>X</em>,<em>Y</em>)是从原点到(X, Y)(<em>X</em>,<em>Y</em>)的螺旋折线段的长度。</p><p>例如dis(0, 1)=3, dis(-2, -1)=9<em>d<strong>i</strong>s</em>(0,1)=3,<em>d<strong>i</strong>s</em>(−2,−1)=9</p><p>给出整点坐标(X, Y)(<em>X</em>,<em>Y</em>)，你能计算出dis(X, Y)<em>d<strong>i</strong>s</em>(<em>X</em>,<em>Y</em>)吗？</p><p><img src="https://acm.sicnu.edu.cn/public/upload/e1b4dd5d49.png"></p><p><strong>思路</strong></p><p>按我的思路，这个螺旋线稍微变换一下，就是由很多个矩形嵌套而成，根据坐标计算矩形的边长和即可。</p><p><a href="https://imgtu.com/i/Hmv28I"><img src="https://s4.ax1x.com/2022/02/05/Hmv28I.png" alt="Hmv28I.png" style="zoom:50%;"></a></p><p><strong>分别推算上下左右各边的公式：</strong></p><p> 上：y&gt;=0 &amp;&amp; abs(x)&lt;=y<br>$$<br>dis=8<em>\sum^{|y-1|}_{i=1}+2</em>y+(y+x)<br>$$<br>下：y&lt;=0 &amp;&amp; abs(x)&lt;=abs(y)</p><p>$$<br>dis=8<em>\sum^{|y-1|}_{i=1}+6</em>|y|-(y+x)<br>$$</p><p>左：x&lt;=0 &amp;&amp; abs(y)&lt;abs(x)<br>$$<br>dis=8*\sum^{|x-1|}_{i=1}+(y-x)<br>$$</p><p>右：<br>$$<br>dis=8<em>\sum^{|x-1|}_{i=1}+4</em>x+(x-y)<br>$$</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//上 </span></span><br><span class="line"><span class="keyword">if</span>(y&gt;=<span class="number">0</span> &amp;&amp; <span class="built_in">abs</span>(x)&lt;=y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;y;i++) res+=i*<span class="number">8</span>;</span><br><span class="line">res+=<span class="number">2</span>*y+(y+x);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//下 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(y&lt;=<span class="number">0</span> &amp;&amp; <span class="built_in">abs</span>(x)&lt;=<span class="built_in">abs</span>(y))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="built_in">abs</span>(y);i++) res+=i*<span class="number">8</span>;</span><br><span class="line">res+=<span class="number">6</span>*<span class="built_in">abs</span>(y)-(y+x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x&lt;=<span class="number">0</span> &amp;&amp; <span class="built_in">abs</span>(y)&lt;<span class="built_in">abs</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="built_in">abs</span>(x);i++) res+=i*<span class="number">8</span>;</span><br><span class="line">res+=(y-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//右 </span></span><br><span class="line"><span class="comment">//if(x&gt;=0 &amp;&amp; x&gt;=y)</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;x;i++) res+=i*<span class="number">8</span>;</span><br><span class="line">res+=<span class="number">4</span>*x+(x-y);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>以上方案，有个问题，在数据过大时会超时，</p><p>看了别的博主的题解，用曼哈顿距离;</p><blockquote><p>曼哈顿距离也叫出租车距离，用来标明两个点在标准坐标系上的绝对轴距总和。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x,y; cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> k = <span class="built_in">max</span>(<span class="built_in">abs</span>(x), <span class="built_in">abs</span>(y));</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= y) cout&lt;&lt;<span class="number">4</span> * k * k + <span class="built_in">abs</span>(x - k) + <span class="built_in">abs</span>(y - k)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x &lt; y) cout&lt;&lt;<span class="number">4</span> * k * k - <span class="built_in">abs</span>(x - k) - <span class="built_in">abs</span>(y - k)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="乘积最大"><a href="#乘积最大" class="headerlink" title="乘积最大"></a>乘积最大</h2><p><strong>思路：</strong></p><p>如果 k == n ,所有的数字是全部都选<br>如果 k &lt; n<br>1.k 如果是偶数的话,选出来的结果一定是非负数 , 原因如下:<br>(1) 负数的个数是偶数个的话,负负得正,那么一定是非负数<br>(2) 负数的个数如果是奇数个的话,那么我们就只选偶数个绝对值最大的负数<br>2.k 如果是奇数个的话,<br>(1)所有的数字如果都是负数,那么选出来的结果也一定都是负数<br>(2)否则的话,则一定至少有 1个非负数, 那么我们将最大的数取出来, 此时要选的个数就是 k-–,k–- 是偶数,那么就又转化为 k-– 是偶数的情况思考</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll n,k;</span><br><span class="line">ll a[N]; </span><br><span class="line"><span class="keyword">int</span> mod = <span class="number">1000000009</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i]; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a,a+n);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>;<span class="comment">//双指针 从两边开始找</span></span><br><span class="line">    <span class="keyword">int</span> sign=<span class="number">1</span>;<span class="comment">//符号初始化</span></span><br><span class="line">    <span class="keyword">if</span>(k%<span class="number">2</span>)<span class="comment">//如果k为奇数情况</span></span><br><span class="line">    &#123;</span><br><span class="line">        res = a[r--];<span class="comment">//先取最大的值</span></span><br><span class="line">        k--;</span><br><span class="line">        <span class="keyword">if</span>(res&lt;<span class="number">0</span>) sign = <span class="number">-1</span>;<span class="comment">//最大的值为负数，k又为奇数，则整个答案为负数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//转化为k为偶数情况，k为偶数，则一定是非负数</span></span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        ll x = a[l]*a[l+<span class="number">1</span>],y = a[r]*a[r<span class="number">-1</span>];<span class="comment">//左右两个端点开始取值</span></span><br><span class="line">        <span class="keyword">if</span>(x*sign &gt; y*sign)</span><br><span class="line">        &#123;</span><br><span class="line">            res = x%mod*res%mod;</span><br><span class="line">            l+=<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            res = y%mod*res%mod;</span><br><span class="line">            r-=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        k-=<span class="number">2</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    cout&lt;&lt;res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="日志统计"><a href="#日志统计" class="headerlink" title="日志统计"></a>日志统计</h2><p>小明维护着一个程序员论坛。现在他收集了一份”点赞”日志，日志共有 <em>N</em>行。</p><p>其中每一行的格式是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts id  </span><br></pre></td></tr></table></figure><p>表示在 <em>t</em> <em>s</em>时刻编号 <em>id</em>的帖子收到一个”赞”。  现在小明想统计有哪些帖子曾经是”热帖”。如果一个帖子曾在任意一个长度为 <em>D</em> 的时间段内收到不少于 <em>K</em> 个赞，小明就认为这个帖子曾是”热帖”。  具体来说，如果存在某个时刻 <em>T</em> 满足该帖在 [<em>T</em>,<em>T</em>+<em>D</em>) 这段时间内(注意是左闭右开区间)收到不少于 <em>K</em> 个赞，该帖就曾是”热帖”。  </p><p>给定日志，请你帮助小明统计出所有曾是”热帖”的帖子编号。  </p><p><strong>输入格式</strong></p><p>第一行包含三个整数 <em>N</em>,<em>D</em>,<em>K</em>。  </p><p>以下 <em>N</em>行每行一条日志，包含两个整数 <em>ts</em> 和 <em>id</em>。</p><p><strong>输出格式</strong></p><p>按从小到大的顺序输出热帖 <em>id</em>。</p><p>每个 <em>id</em>占一行。</p><p><strong>数据范围</strong></p><p>1≤<em>K</em>≤<em>N</em>≤105,<br>0≤<em>ts</em>,<em>id</em>≤105,<br>1≤<em>D</em>≤10000</p><p><strong>输入样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7 10 2</span><br><span class="line">0 1</span><br><span class="line">0 10</span><br><span class="line">10 10</span><br><span class="line">10 1</span><br><span class="line">9 1</span><br><span class="line">100 3</span><br><span class="line">100 3</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p><strong>思路：</strong> 双指针</p><p>定义结构体 重写排序规则</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> n,d,k;</span><br><span class="line"><span class="keyword">bool</span> st[N]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> ts;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">&#125; node; </span><br><span class="line"></span><br><span class="line"><span class="comment">//定义排序规则</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node n1, node n2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n1.ts&lt;n2.ts;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;d&gt;&gt;k;</span><br><span class="line"><span class="keyword">int</span> cnt[N];<span class="comment">//用来记录一个id号获得的赞数 </span></span><br><span class="line">node log[N];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;log[i].ts&gt;&gt;log[i].id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(log,log+n,cmp);<span class="comment">//排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//双指针 ，i走在前面，j走在后面 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;log[i].ts&lt;&lt;&quot;  &quot;&lt;&lt;log[i].id&lt;&lt;endl;</span></span><br><span class="line">        cnt[log[i].id]++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(log[i].ts-log[j].ts&gt;=d)<span class="comment">//超过窗口大小，即时间跨度大于d </span></span><br><span class="line">        &#123;</span><br><span class="line">        cnt[log[j].id]--;</span><br><span class="line">        j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//标记热帖id </span></span><br><span class="line"><span class="keyword">if</span>(cnt[log[i].id]&gt;=k)</span><br><span class="line">&#123;</span><br><span class="line">st[log[i].id]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">100000</span>;i++)<span class="comment">//标记过的id输出 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(st[i]) cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>晚安</title>
      <link href="/2022/01/23/%E6%99%9A%E5%AE%89/"/>
      <url>/2022/01/23/%E6%99%9A%E5%AE%89/</url>
      
        <content type="html"><![CDATA[<h2 id="晚安故事–小熊的星星"><a href="#晚安故事–小熊的星星" class="headerlink" title="晚安故事–小熊的星星"></a>晚安故事–小熊的星星</h2><p>小熊每天睡前都会坐在门前看星星，小熊住在森林边的小木屋里面，忙完一天小熊便会倚在门框边看星星。</p><p>森林上空的星空是那么明亮璀璨，小熊每天都会注视着最亮的那颗星星看好久好久，直到睡去。</p><p>这天晚上，小熊像往常一样看着星空，可是却找不到最亮的那颗星星。就在小熊奇怪的时候，身边传来了脚步声。</p><p>小熊扭头看过去，面前是一只小兔子，长得很漂亮，尤其是她大大的眼睛，好看的仿佛一片星河。</p><p>小熊看着她的眼睛一阵恍惚，才急忙问道:“请问有什么事情吗”小兔子说到，她是来游玩的，但是不小心迷路了，天太黑，可以住一段时间嘛。</p><p>小兔子看到木屋里的蜂蜜罐说，“我可以帮你一起干活。”小熊正在思考的时候，对上小兔子的眼睛，很奇妙的就答应了下来。</p><p>小兔子睡觉的地方正好可以看到外面的星空，她躺在木床上看着星空，小熊侧头看着她。</p><p>第二天清晨，太阳刚刚升起，唤醒了森林。小熊就已经准备好了丰盛的早餐，叫醒了还在睡觉的小兔子，小兔子的眼睛似乎没有昨夜那么明亮，但依然很好看。</p><p>待小兔子吃完，满意的擦了擦嘴，小熊才背起竹筐，今天他要去采摘果子。</p><p>小兔子坐在小熊自制的秋千上看着小熊，太阳渐渐升上头顶，小熊决定避避日头，他摘了几个最饱满的果子去找小兔子。</p><p>“嗨，吃点果子，这天气太热了。”</p><p>小兔子开心的捧着果子去洗，小熊一边剥着果皮一边问道:“你从哪里来呀，来这里打算做什么呢。”</p><p>小兔子接过剥好的水果， 想了一下说道:“我从很远的地方来，张来这里看星星”</p><p>小熊很诧异，看了小兔子一眼，正好对上小兔子那明亮的双眼，真的好美，就像星星一样。“我也喜欢这里的星空。”</p><p>就这样，小兔子似乎忘了回家，每天都待在这里，要么坐在秋千上看着小熊，要么就是陪在小熊的身边。</p><p>晚上，小熊和小兔子一起坐在门前看着星星，小熊看着星空，在想那颗星星为什么还没有回来。</p><p>小兔子凑到小熊身边，问他为什么喜欢看星星，小熊一低头正好对上小兔子的眼睛。</p><p>在夜晚，那双眼睛在月光的照射下格外明亮，小熊再一次被这双眸迷住了。</p><p>还没等小熊回答，小兔子便轻轻吻上了小熊的唇，小熊仿佛置身在星空，周围全是闪闪发光的星星，他就漂浮在其中。</p><p>直到小兔子害羞的钻进小熊怀里，小熊没有回答，小兔子自顾自的说道，我喜欢星星。小熊抱住小兔子，直到小兔子慢慢睡着睡到第二天醒来。</p><p>小兔子从来没说过离开，小熊也没问过，因为小熊知道小兔子就是自己最爱的那颗星星。</p><p>那天小兔子睡着后，头上的星星都在发着光，一闪一闪的，星光不断撞击着小熊的心，以前的星星在小熊心中已经有东西代替了。</p><p>小熊对怀里的小兔子轻声说到，你就是我最爱的星星，以后我的眼里只有你，有你的陪伴，我爱你。</p><p>晚安啦~  吴先生 好梦❥</p><p><img src="/.com//QQ文件\MobileFile\1586940641039.gif"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello y3000</title>
      <link href="/2022/01/23/hello-y3000/"/>
      <url>/2022/01/23/hello-y3000/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><ul><li>1</li><li>2</li><li>3</li><li>4</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/23/hello-world/"/>
      <url>/2022/01/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211032019153.png" alt="image-20221103201853943"></p><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211031933162.png" alt="image-20221103193300116"></p><p><img src="https://cdn.jsdelivr.net/gh/y3000/ImgRepo/img/202211032112863.png" alt="image-20221103211212826"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
